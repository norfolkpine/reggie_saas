"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@hocuspocus";
exports.ids = ["vendor-chunks/@hocuspocus"];
exports.modules = {

/***/ "(ssr)/./node_modules/@hocuspocus/common/dist/hocuspocus-common.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@hocuspocus/common/dist/hocuspocus-common.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ConnectionTimeout: () => (/* binding */ ConnectionTimeout),\n/* harmony export */   Forbidden: () => (/* binding */ Forbidden),\n/* harmony export */   MessageTooBig: () => (/* binding */ MessageTooBig),\n/* harmony export */   ResetConnection: () => (/* binding */ ResetConnection),\n/* harmony export */   Unauthorized: () => (/* binding */ Unauthorized),\n/* harmony export */   WsReadyStates: () => (/* binding */ WsReadyStates),\n/* harmony export */   awarenessStatesToArray: () => (/* binding */ awarenessStatesToArray),\n/* harmony export */   readAuthMessage: () => (/* binding */ readAuthMessage),\n/* harmony export */   writeAuthenticated: () => (/* binding */ writeAuthenticated),\n/* harmony export */   writeAuthentication: () => (/* binding */ writeAuthentication),\n/* harmony export */   writePermissionDenied: () => (/* binding */ writePermissionDenied)\n/* harmony export */ });\n/**\n * Common Math expressions.\n *\n * @module math\n */\n\nconst floor = Math.floor;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nconst min = (a, b) => a < b ? a : b;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nconst max = (a, b) => a > b ? a : b;\n\n/* eslint-env browser */\n\nconst BIT8 = 128;\nconst BITS7 = 127;\n\n/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\n\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  const buf = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i));\n  }\n  return buf\n};\n\n/* c8 ignore next */\nconst utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Native = str => utf8TextEncoder.encode(str);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* c8 ignore next */\nconst encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\n\n/* c8 ignore next */\nlet utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true });\n\n/* c8 ignore start */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* c8 ignore next */\n  utf8TextDecoder = null;\n}\n\n/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nconst write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length;\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf);\n    encoder.cbuf = new Uint8Array(bufferLen * 2);\n    encoder.cpos = 0;\n  }\n  encoder.cbuf[encoder.cpos++] = num;\n};\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nconst writeVarUint = (encoder, num) => {\n  while (num > BITS7) {\n    write(encoder, BIT8 | (BITS7 & num));\n    num = floor(num / 128); // shift >>> 7\n  }\n  write(encoder, BITS7 & num);\n};\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000);\nconst _maxStrBSize = _strBuffer.length / 3;\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* c8 ignore next */\n    const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;\n    writeVarUint(encoder, written);\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i]);\n    }\n  } else {\n    writeVarUint8Array(encoder, encodeUtf8(str));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  writeVarUint(encoder, len);\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* c8 ignore next */\nconst writeVarString = (utf8TextEncoder && /** @type {any} */ (utf8TextEncoder).encodeInto) ? _writeVarStringNative : _writeVarStringPolyfill;\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length;\n  const cpos = encoder.cpos;\n  const leftCopyLen = min(bufferLen - cpos, uint8Array.length);\n  const rightCopyLen = uint8Array.length - leftCopyLen;\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);\n  encoder.cpos += leftCopyLen;\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf);\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(max(bufferLen * 2, rightCopyLen));\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));\n    encoder.cpos = rightCopyLen;\n  }\n};\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength);\n  writeUint8Array(encoder, uint8Array);\n};\n\n/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* c8 ignore next */\nconst create = s => new Error(s);\n\n/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\n\nconst errorUnexpectedEndOfArray = create('Unexpected end of array');\nconst errorIntegerOutOfRange = create('Integer out of Range');\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nconst readUint8Array = (decoder, len) => {\n  const view = new Uint8Array(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);\n  decoder.pos += len;\n  return view\n};\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nconst readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder));\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nconst readUint8 = decoder => decoder.arr[decoder.pos++];\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nconst readVarUint = decoder => {\n  let num = 0;\n  let mult = 1;\n  const len = decoder.arr.length;\n  while (decoder.pos < len) {\n    const r = decoder.arr[decoder.pos++];\n    // num = num | ((r & binary.BITS7) << len)\n    num = num + (r & BITS7) * mult; // shift $r << (7*#iterations) and add it to num\n    mult *= 128; // next iteration, shift 7 \"more\" to the left\n    if (r < BIT8) {\n      return num\n    }\n    /* c8 ignore start */\n    if (num > MAX_SAFE_INTEGER) {\n      throw errorIntegerOutOfRange\n    }\n    /* c8 ignore stop */\n  }\n  throw errorUnexpectedEndOfArray\n};\n\n/**\n * We don't test this function anymore as we use native decoding/encoding by default now.\n * Better not modify this anymore..\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\n/* c8 ignore start */\nconst _readVarStringPolyfill = decoder => {\n  let remainingLen = readVarUint(decoder);\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)); // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder));\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000;\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);\n        decoder.pos += nextLen;\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes));\n        remainingLen -= nextLen;\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n};\n/* c8 ignore stop */\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n */\nconst _readVarStringNative = decoder =>\n  /** @type any */ (utf8TextDecoder).decode(readVarUint8Array(decoder));\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n *\n */\n/* c8 ignore next */\nconst readVarString = utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill;\n\nvar AuthMessageType;\n(function (AuthMessageType) {\n    AuthMessageType[AuthMessageType[\"Token\"] = 0] = \"Token\";\n    AuthMessageType[AuthMessageType[\"PermissionDenied\"] = 1] = \"PermissionDenied\";\n    AuthMessageType[AuthMessageType[\"Authenticated\"] = 2] = \"Authenticated\";\n})(AuthMessageType || (AuthMessageType = {}));\nconst writeAuthentication = (encoder, auth) => {\n    writeVarUint(encoder, AuthMessageType.Token);\n    writeVarString(encoder, auth);\n};\nconst writePermissionDenied = (encoder, reason) => {\n    writeVarUint(encoder, AuthMessageType.PermissionDenied);\n    writeVarString(encoder, reason);\n};\nconst writeAuthenticated = (encoder, scope) => {\n    writeVarUint(encoder, AuthMessageType.Authenticated);\n    writeVarString(encoder, scope);\n};\nconst readAuthMessage = (decoder, permissionDeniedHandler, authenticatedHandler) => {\n    switch (readVarUint(decoder)) {\n        case AuthMessageType.PermissionDenied: {\n            permissionDeniedHandler(readVarString(decoder));\n            break;\n        }\n        case AuthMessageType.Authenticated: {\n            authenticatedHandler(readVarString(decoder));\n            break;\n        }\n    }\n};\n\n/**\n * The server is terminating the connection because a data frame was received\n * that is too large.\n * See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent/code\n */\nconst MessageTooBig = {\n    code: 1009,\n    reason: 'Message Too Big',\n};\n/**\n * The server successfully processed the request, asks that the requester reset\n * its document view, and is not returning any content.\n */\nconst ResetConnection = {\n    code: 4205,\n    reason: 'Reset Connection',\n};\n/**\n * Similar to Forbidden, but specifically for use when authentication is required and has\n * failed or has not yet been provided.\n */\nconst Unauthorized = {\n    code: 4401,\n    reason: 'Unauthorized',\n};\n/**\n * The request contained valid data and was understood by the server, but the server\n * is refusing action.\n */\nconst Forbidden = {\n    code: 4403,\n    reason: 'Forbidden',\n};\n/**\n * The server timed out waiting for the request.\n */\nconst ConnectionTimeout = {\n    code: 4408,\n    reason: 'Connection Timeout',\n};\n\nconst awarenessStatesToArray = (states) => {\n    return Array.from(states.entries()).map(([key, value]) => {\n        return {\n            clientId: key,\n            ...value,\n        };\n    });\n};\n\n/**\n * State of the WebSocket connection.\n * https://developer.mozilla.org/de/docs/Web/API/WebSocket/readyState\n */\nvar WsReadyStates;\n(function (WsReadyStates) {\n    WsReadyStates[WsReadyStates[\"Connecting\"] = 0] = \"Connecting\";\n    WsReadyStates[WsReadyStates[\"Open\"] = 1] = \"Open\";\n    WsReadyStates[WsReadyStates[\"Closing\"] = 2] = \"Closing\";\n    WsReadyStates[WsReadyStates[\"Closed\"] = 3] = \"Closed\";\n})(WsReadyStates || (WsReadyStates = {}));\n\n\n//# sourceMappingURL=hocuspocus-common.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@hocuspocus/common/dist/hocuspocus-common.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AwarenessError: () => (/* binding */ AwarenessError),\n/* harmony export */   HocuspocusProvider: () => (/* binding */ HocuspocusProvider),\n/* harmony export */   HocuspocusProviderWebsocket: () => (/* binding */ HocuspocusProviderWebsocket),\n/* harmony export */   MessageType: () => (/* binding */ MessageType),\n/* harmony export */   WebSocketStatus: () => (/* binding */ WebSocketStatus)\n/* harmony export */ });\n/* harmony import */ var _hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hocuspocus/common */ \"(ssr)/./node_modules/@hocuspocus/common/dist/hocuspocus-common.esm.js\");\n/* harmony import */ var yjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! yjs */ \"(ssr)/./node_modules/yjs/dist/yjs.mjs\");\n/* harmony import */ var _lifeomic_attempt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @lifeomic/attempt */ \"(ssr)/./node_modules/@lifeomic/attempt/dist/es6/src/index.js\");\n\n\n\n\n/**\n * Common Math expressions.\n *\n * @module math\n */\n\nconst floor = Math.floor;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The smaller element of a and b\n */\nconst min = (a, b) => a < b ? a : b;\n\n/**\n * @function\n * @param {number} a\n * @param {number} b\n * @return {number} The bigger element of a and b\n */\nconst max = (a, b) => a > b ? a : b;\n\n/* eslint-env browser */\n\nconst BIT7 = 64;\nconst BIT8 = 128;\nconst BITS6 = 63;\nconst BITS7 = 127;\n\n/**\n * Utility helpers for working with numbers.\n *\n * @module number\n */\n\n\nconst MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER;\n\n/**\n * Utility module to work with sets.\n *\n * @module set\n */\n\nconst create$2 = () => new Set();\n\n/**\n * Utility module to work with Arrays.\n *\n * @module array\n */\n\n\n/**\n * Transforms something array-like to an actual Array.\n *\n * @function\n * @template T\n * @param {ArrayLike<T>|Iterable<T>} arraylike\n * @return {T}\n */\nconst from = Array.from;\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Polyfill = str => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  const buf = new Uint8Array(len);\n  for (let i = 0; i < len; i++) {\n    buf[i] = /** @type {number} */ (encodedString.codePointAt(i));\n  }\n  return buf\n};\n\n/* c8 ignore next */\nconst utf8TextEncoder = /** @type {TextEncoder} */ (typeof TextEncoder !== 'undefined' ? new TextEncoder() : null);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\nconst _encodeUtf8Native = str => utf8TextEncoder.encode(str);\n\n/**\n * @param {string} str\n * @return {Uint8Array}\n */\n/* c8 ignore next */\nconst encodeUtf8 = utf8TextEncoder ? _encodeUtf8Native : _encodeUtf8Polyfill;\n\n/* c8 ignore next */\nlet utf8TextDecoder = typeof TextDecoder === 'undefined' ? null : new TextDecoder('utf-8', { fatal: true, ignoreBOM: true });\n\n/* c8 ignore start */\nif (utf8TextDecoder && utf8TextDecoder.decode(new Uint8Array()).length === 1) {\n  // Safari doesn't handle BOM correctly.\n  // This fixes a bug in Safari 13.0.5 where it produces a BOM the first time it is called.\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the first call and\n  // utf8TextDecoder.decode(new Uint8Array()).length === 1 on the second call\n  // Another issue is that from then on no BOM chars are recognized anymore\n  /* c8 ignore next */\n  utf8TextDecoder = null;\n}\n\n/**\n * Efficient schema-less binary encoding with support for variable length encoding.\n *\n * Use [lib0/encoding] with [lib0/decoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module encoding\n */\n\n\n/**\n * A BinaryEncoder handles the encoding to an Uint8Array.\n */\nclass Encoder {\n  constructor () {\n    this.cpos = 0;\n    this.cbuf = new Uint8Array(100);\n    /**\n     * @type {Array<Uint8Array>}\n     */\n    this.bufs = [];\n  }\n}\n\n/**\n * @function\n * @return {Encoder}\n */\nconst createEncoder = () => new Encoder();\n\n/**\n * The current length of the encoded data.\n *\n * @function\n * @param {Encoder} encoder\n * @return {number}\n */\nconst length$1 = encoder => {\n  let len = encoder.cpos;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    len += encoder.bufs[i].length;\n  }\n  return len\n};\n\n/**\n * Transform to Uint8Array.\n *\n * @function\n * @param {Encoder} encoder\n * @return {Uint8Array} The created ArrayBuffer.\n */\nconst toUint8Array = encoder => {\n  const uint8arr = new Uint8Array(length$1(encoder));\n  let curPos = 0;\n  for (let i = 0; i < encoder.bufs.length; i++) {\n    const d = encoder.bufs[i];\n    uint8arr.set(d, curPos);\n    curPos += d.length;\n  }\n  uint8arr.set(new Uint8Array(encoder.cbuf.buffer, 0, encoder.cpos), curPos);\n  return uint8arr\n};\n\n/**\n * Write one byte to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The byte that is to be encoded.\n */\nconst write = (encoder, num) => {\n  const bufferLen = encoder.cbuf.length;\n  if (encoder.cpos === bufferLen) {\n    encoder.bufs.push(encoder.cbuf);\n    encoder.cbuf = new Uint8Array(bufferLen * 2);\n    encoder.cpos = 0;\n  }\n  encoder.cbuf[encoder.cpos++] = num;\n};\n\n/**\n * Write a variable length unsigned integer. Max encodable integer is 2^53.\n *\n * @function\n * @param {Encoder} encoder\n * @param {number} num The number that is to be encoded.\n */\nconst writeVarUint = (encoder, num) => {\n  while (num > BITS7) {\n    write(encoder, BIT8 | (BITS7 & num));\n    num = floor(num / 128); // shift >>> 7\n  }\n  write(encoder, BITS7 & num);\n};\n\n/**\n * A cache to store strings temporarily\n */\nconst _strBuffer = new Uint8Array(30000);\nconst _maxStrBSize = _strBuffer.length / 3;\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringNative = (encoder, str) => {\n  if (str.length < _maxStrBSize) {\n    // We can encode the string into the existing buffer\n    /* c8 ignore next */\n    const written = utf8TextEncoder.encodeInto(str, _strBuffer).written || 0;\n    writeVarUint(encoder, written);\n    for (let i = 0; i < written; i++) {\n      write(encoder, _strBuffer[i]);\n    }\n  } else {\n    writeVarUint8Array(encoder, encodeUtf8(str));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\nconst _writeVarStringPolyfill = (encoder, str) => {\n  const encodedString = unescape(encodeURIComponent(str));\n  const len = encodedString.length;\n  writeVarUint(encoder, len);\n  for (let i = 0; i < len; i++) {\n    write(encoder, /** @type {number} */ (encodedString.codePointAt(i)));\n  }\n};\n\n/**\n * Write a variable length string.\n *\n * @function\n * @param {Encoder} encoder\n * @param {String} str The string that is to be encoded.\n */\n/* c8 ignore next */\nconst writeVarString = (utf8TextEncoder && /** @type {any} */ (utf8TextEncoder).encodeInto) ? _writeVarStringNative : _writeVarStringPolyfill;\n\n/**\n * Append fixed-length Uint8Array to the encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeUint8Array = (encoder, uint8Array) => {\n  const bufferLen = encoder.cbuf.length;\n  const cpos = encoder.cpos;\n  const leftCopyLen = min(bufferLen - cpos, uint8Array.length);\n  const rightCopyLen = uint8Array.length - leftCopyLen;\n  encoder.cbuf.set(uint8Array.subarray(0, leftCopyLen), cpos);\n  encoder.cpos += leftCopyLen;\n  if (rightCopyLen > 0) {\n    // Still something to write, write right half..\n    // Append new buffer\n    encoder.bufs.push(encoder.cbuf);\n    // must have at least size of remaining buffer\n    encoder.cbuf = new Uint8Array(max(bufferLen * 2, rightCopyLen));\n    // copy array\n    encoder.cbuf.set(uint8Array.subarray(leftCopyLen));\n    encoder.cpos = rightCopyLen;\n  }\n};\n\n/**\n * Append an Uint8Array to Encoder.\n *\n * @function\n * @param {Encoder} encoder\n * @param {Uint8Array} uint8Array\n */\nconst writeVarUint8Array = (encoder, uint8Array) => {\n  writeVarUint(encoder, uint8Array.byteLength);\n  writeUint8Array(encoder, uint8Array);\n};\n\n/**\n * Error helpers.\n *\n * @module error\n */\n\n/**\n * @param {string} s\n * @return {Error}\n */\n/* c8 ignore next */\nconst create$1 = s => new Error(s);\n\n/**\n * Efficient schema-less binary decoding with support for variable length encoding.\n *\n * Use [lib0/decoding] with [lib0/encoding]. Every encoding function has a corresponding decoding function.\n *\n * Encodes numbers in little-endian order (least to most significant byte order)\n * and is compatible with Golang's binary encoding (https://golang.org/pkg/encoding/binary/)\n * which is also used in Protocol Buffers.\n *\n * ```js\n * // encoding step\n * const encoder = encoding.createEncoder()\n * encoding.writeVarUint(encoder, 256)\n * encoding.writeVarString(encoder, 'Hello world!')\n * const buf = encoding.toUint8Array(encoder)\n * ```\n *\n * ```js\n * // decoding step\n * const decoder = decoding.createDecoder(buf)\n * decoding.readVarUint(decoder) // => 256\n * decoding.readVarString(decoder) // => 'Hello world!'\n * decoding.hasContent(decoder) // => false - all data is read\n * ```\n *\n * @module decoding\n */\n\n\nconst errorUnexpectedEndOfArray = create$1('Unexpected end of array');\nconst errorIntegerOutOfRange = create$1('Integer out of Range');\n\n/**\n * A Decoder handles the decoding of an Uint8Array.\n */\nclass Decoder {\n  /**\n   * @param {Uint8Array} uint8Array Binary data to decode\n   */\n  constructor (uint8Array) {\n    /**\n     * Decoding target.\n     *\n     * @type {Uint8Array}\n     */\n    this.arr = uint8Array;\n    /**\n     * Current decoding position.\n     *\n     * @type {number}\n     */\n    this.pos = 0;\n  }\n}\n\n/**\n * @function\n * @param {Uint8Array} uint8Array\n * @return {Decoder}\n */\nconst createDecoder = uint8Array => new Decoder(uint8Array);\n\n/**\n * Create an Uint8Array view of the next `len` bytes and advance the position by `len`.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder The decoder instance\n * @param {number} len The length of bytes to read\n * @return {Uint8Array}\n */\nconst readUint8Array = (decoder, len) => {\n  const view = new Uint8Array(decoder.arr.buffer, decoder.pos + decoder.arr.byteOffset, len);\n  decoder.pos += len;\n  return view\n};\n\n/**\n * Read variable length Uint8Array.\n *\n * Important: The Uint8Array still points to the underlying ArrayBuffer. Make sure to discard the result as soon as possible to prevent any memory leaks.\n *            Use `buffer.copyUint8Array` to copy the result into a new Uint8Array.\n *\n * @function\n * @param {Decoder} decoder\n * @return {Uint8Array}\n */\nconst readVarUint8Array = decoder => readUint8Array(decoder, readVarUint(decoder));\n\n/**\n * Read one byte as unsigned integer.\n * @function\n * @param {Decoder} decoder The decoder instance\n * @return {number} Unsigned 8-bit integer\n */\nconst readUint8 = decoder => decoder.arr[decoder.pos++];\n\n/**\n * Read unsigned integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nconst readVarUint = decoder => {\n  let num = 0;\n  let mult = 1;\n  const len = decoder.arr.length;\n  while (decoder.pos < len) {\n    const r = decoder.arr[decoder.pos++];\n    // num = num | ((r & binary.BITS7) << len)\n    num = num + (r & BITS7) * mult; // shift $r << (7*#iterations) and add it to num\n    mult *= 128; // next iteration, shift 7 \"more\" to the left\n    if (r < BIT8) {\n      return num\n    }\n    /* c8 ignore start */\n    if (num > MAX_SAFE_INTEGER) {\n      throw errorIntegerOutOfRange\n    }\n    /* c8 ignore stop */\n  }\n  throw errorUnexpectedEndOfArray\n};\n\n/**\n * Read signed integer (32bit) with variable length.\n * 1/8th of the storage is used as encoding overhead.\n *  * numbers < 2^7 is stored in one bytlength\n *  * numbers < 2^14 is stored in two bylength\n * @todo This should probably create the inverse ~num if number is negative - but this would be a breaking change.\n *\n * @function\n * @param {Decoder} decoder\n * @return {number} An unsigned integer.length\n */\nconst readVarInt = decoder => {\n  let r = decoder.arr[decoder.pos++];\n  let num = r & BITS6;\n  let mult = 64;\n  const sign = (r & BIT7) > 0 ? -1 : 1;\n  if ((r & BIT8) === 0) {\n    // don't continue reading\n    return sign * num\n  }\n  const len = decoder.arr.length;\n  while (decoder.pos < len) {\n    r = decoder.arr[decoder.pos++];\n    // num = num | ((r & binary.BITS7) << len)\n    num = num + (r & BITS7) * mult;\n    mult *= 128;\n    if (r < BIT8) {\n      return sign * num\n    }\n    /* c8 ignore start */\n    if (num > MAX_SAFE_INTEGER) {\n      throw errorIntegerOutOfRange\n    }\n    /* c8 ignore stop */\n  }\n  throw errorUnexpectedEndOfArray\n};\n\n/**\n * We don't test this function anymore as we use native decoding/encoding by default now.\n * Better not modify this anymore..\n *\n * Transforming utf8 to a string is pretty expensive. The code performs 10x better\n * when String.fromCodePoint is fed with all characters as arguments.\n * But most environments have a maximum number of arguments per functions.\n * For effiency reasons we apply a maximum of 10000 characters at once.\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String.\n */\n/* c8 ignore start */\nconst _readVarStringPolyfill = decoder => {\n  let remainingLen = readVarUint(decoder);\n  if (remainingLen === 0) {\n    return ''\n  } else {\n    let encodedString = String.fromCodePoint(readUint8(decoder)); // remember to decrease remainingLen\n    if (--remainingLen < 100) { // do not create a Uint8Array for small strings\n      while (remainingLen--) {\n        encodedString += String.fromCodePoint(readUint8(decoder));\n      }\n    } else {\n      while (remainingLen > 0) {\n        const nextLen = remainingLen < 10000 ? remainingLen : 10000;\n        // this is dangerous, we create a fresh array view from the existing buffer\n        const bytes = decoder.arr.subarray(decoder.pos, decoder.pos + nextLen);\n        decoder.pos += nextLen;\n        // Starting with ES5.1 we can supply a generic array-like object as arguments\n        encodedString += String.fromCodePoint.apply(null, /** @type {any} */ (bytes));\n        remainingLen -= nextLen;\n      }\n    }\n    return decodeURIComponent(escape(encodedString))\n  }\n};\n/* c8 ignore stop */\n\n/**\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n */\nconst _readVarStringNative = decoder =>\n  /** @type any */ (utf8TextDecoder).decode(readVarUint8Array(decoder));\n\n/**\n * Read string of variable length\n * * varUint is used to store the length of the string\n *\n * @function\n * @param {Decoder} decoder\n * @return {String} The read String\n *\n */\n/* c8 ignore next */\nconst readVarString = utf8TextDecoder ? _readVarStringNative : _readVarStringPolyfill;\n\n/**\n * Look ahead and read varString without incrementing position\n *\n * @function\n * @param {Decoder} decoder\n * @return {string}\n */\nconst peekVarString = decoder => {\n  const pos = decoder.pos;\n  const s = readVarString(decoder);\n  decoder.pos = pos;\n  return s\n};\n\n/**\n * Utility module to work with time.\n *\n * @module time\n */\n\n\n/**\n * Return current unix time.\n *\n * @return {number}\n */\nconst getUnixTime = Date.now;\n\n/**\n * Utility module to work with key-value stores.\n *\n * @module map\n */\n\n/**\n * Creates a new Map instance.\n *\n * @function\n * @return {Map<any, any>}\n *\n * @function\n */\nconst create = () => new Map();\n\n/**\n * Get map property. Create T if property is undefined and set T on map.\n *\n * ```js\n * const listeners = map.setIfUndefined(events, 'eventName', set.create)\n * listeners.add(listener)\n * ```\n *\n * @function\n * @template {Map<any, any>} MAP\n * @template {MAP extends Map<any,infer V> ? function():V : unknown} CF\n * @param {MAP} map\n * @param {MAP extends Map<infer K,any> ? K : unknown} key\n * @param {CF} createT\n * @return {ReturnType<CF>}\n */\nconst setIfUndefined = (map, key, createT) => {\n  let set = map.get(key);\n  if (set === undefined) {\n    map.set(key, set = createT());\n  }\n  return set\n};\n\n/**\n * Observable class prototype.\n *\n * @module observable\n */\n\n\n/* c8 ignore start */\n/**\n * Handles named events.\n *\n * @deprecated\n * @template N\n */\nclass Observable {\n  constructor () {\n    /**\n     * Some desc.\n     * @type {Map<N, any>}\n     */\n    this._observers = create();\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  on (name, f) {\n    setIfUndefined(this._observers, name, create$2).add(f);\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  once (name, f) {\n    /**\n     * @param  {...any} args\n     */\n    const _f = (...args) => {\n      this.off(name, _f);\n      f(...args);\n    };\n    this.on(name, _f);\n  }\n\n  /**\n   * @param {N} name\n   * @param {function} f\n   */\n  off (name, f) {\n    const observers = this._observers.get(name);\n    if (observers !== undefined) {\n      observers.delete(f);\n      if (observers.size === 0) {\n        this._observers.delete(name);\n      }\n    }\n  }\n\n  /**\n   * Emit a named event. All registered event listeners that listen to the\n   * specified name will receive the event.\n   *\n   * @todo This should catch exceptions\n   *\n   * @param {N} name The event name.\n   * @param {Array<any>} args The arguments that are applied to the event listener.\n   */\n  emit (name, args) {\n    // copy all listeners to an array first to make sure that no event is emitted to listeners that are subscribed while the event handler is called.\n    return from((this._observers.get(name) || create()).values()).forEach(f => f(...args))\n  }\n\n  destroy () {\n    this._observers = create();\n  }\n}\n/* c8 ignore end */\n\n/**\n * Utility functions for working with EcmaScript objects.\n *\n * @module object\n */\n\n\n/**\n * @param {Object<string,any>} obj\n */\nconst keys = Object.keys;\n\n/**\n * @deprecated use object.size instead\n * @param {Object<string,any>} obj\n * @return {number}\n */\nconst length = obj => keys(obj).length;\n\n/**\n * Calls `Object.prototype.hasOwnProperty`.\n *\n * @param {any} obj\n * @param {string|symbol} key\n * @return {boolean}\n */\nconst hasProperty = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key);\n\n/**\n * Common functions and function call helpers.\n *\n * @module function\n */\n\n\n/**\n * @template T\n *\n * @param {T} a\n * @param {T} b\n * @return {boolean}\n */\nconst equalityStrict = (a, b) => a === b;\n\n/* c8 ignore start */\n\n/**\n * @param {any} a\n * @param {any} b\n * @return {boolean}\n */\nconst equalityDeep = (a, b) => {\n  if (a == null || b == null) {\n    return equalityStrict(a, b)\n  }\n  if (a.constructor !== b.constructor) {\n    return false\n  }\n  if (a === b) {\n    return true\n  }\n  switch (a.constructor) {\n    case ArrayBuffer:\n      a = new Uint8Array(a);\n      b = new Uint8Array(b);\n    // eslint-disable-next-line no-fallthrough\n    case Uint8Array: {\n      if (a.byteLength !== b.byteLength) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) {\n          return false\n        }\n      }\n      break\n    }\n    case Set: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const value of a) {\n        if (!b.has(value)) {\n          return false\n        }\n      }\n      break\n    }\n    case Map: {\n      if (a.size !== b.size) {\n        return false\n      }\n      for (const key of a.keys()) {\n        if (!b.has(key) || !equalityDeep(a.get(key), b.get(key))) {\n          return false\n        }\n      }\n      break\n    }\n    case Object:\n      if (length(a) !== length(b)) {\n        return false\n      }\n      for (const key in a) {\n        if (!hasProperty(a, key) || !equalityDeep(a[key], b[key])) {\n          return false\n        }\n      }\n      break\n    case Array:\n      if (a.length !== b.length) {\n        return false\n      }\n      for (let i = 0; i < a.length; i++) {\n        if (!equalityDeep(a[i], b[i])) {\n          return false\n        }\n      }\n      break\n    default:\n      return false\n  }\n  return true\n};\n\n/**\n * @module awareness-protocol\n */\n\n\nconst outdatedTimeout = 30000;\n\n/**\n * @typedef {Object} MetaClientState\n * @property {number} MetaClientState.clock\n * @property {number} MetaClientState.lastUpdated unix timestamp\n */\n\n/**\n * The Awareness class implements a simple shared state protocol that can be used for non-persistent data like awareness information\n * (cursor, username, status, ..). Each client can update its own local state and listen to state changes of\n * remote clients. Every client may set a state of a remote peer to `null` to mark the client as offline.\n *\n * Each client is identified by a unique client id (something we borrow from `doc.clientID`). A client can override\n * its own state by propagating a message with an increasing timestamp (`clock`). If such a message is received, it is\n * applied if the known state of that client is older than the new state (`clock < newClock`). If a client thinks that\n * a remote client is offline, it may propagate a message with\n * `{ clock: currentClientClock, state: null, client: remoteClient }`. If such a\n * message is received, and the known clock of that client equals the received clock, it will override the state with `null`.\n *\n * Before a client disconnects, it should propagate a `null` state with an updated clock.\n *\n * Awareness states must be updated every 30 seconds. Otherwise the Awareness instance will delete the client state.\n *\n * @extends {Observable<string>}\n */\nclass Awareness extends Observable {\n  /**\n   * @param {Y.Doc} doc\n   */\n  constructor (doc) {\n    super();\n    this.doc = doc;\n    /**\n     * @type {number}\n     */\n    this.clientID = doc.clientID;\n    /**\n     * Maps from client id to client state\n     * @type {Map<number, Object<string, any>>}\n     */\n    this.states = new Map();\n    /**\n     * @type {Map<number, MetaClientState>}\n     */\n    this.meta = new Map();\n    this._checkInterval = /** @type {any} */ (setInterval(() => {\n      const now = getUnixTime();\n      if (this.getLocalState() !== null && (outdatedTimeout / 2 <= now - /** @type {{lastUpdated:number}} */ (this.meta.get(this.clientID)).lastUpdated)) {\n        // renew local clock\n        this.setLocalState(this.getLocalState());\n      }\n      /**\n       * @type {Array<number>}\n       */\n      const remove = [];\n      this.meta.forEach((meta, clientid) => {\n        if (clientid !== this.clientID && outdatedTimeout <= now - meta.lastUpdated && this.states.has(clientid)) {\n          remove.push(clientid);\n        }\n      });\n      if (remove.length > 0) {\n        removeAwarenessStates(this, remove, 'timeout');\n      }\n    }, floor(outdatedTimeout / 10)));\n    doc.on('destroy', () => {\n      this.destroy();\n    });\n    this.setLocalState({});\n  }\n\n  destroy () {\n    this.emit('destroy', [this]);\n    this.setLocalState(null);\n    super.destroy();\n    clearInterval(this._checkInterval);\n  }\n\n  /**\n   * @return {Object<string,any>|null}\n   */\n  getLocalState () {\n    return this.states.get(this.clientID) || null\n  }\n\n  /**\n   * @param {Object<string,any>|null} state\n   */\n  setLocalState (state) {\n    const clientID = this.clientID;\n    const currLocalMeta = this.meta.get(clientID);\n    const clock = currLocalMeta === undefined ? 0 : currLocalMeta.clock + 1;\n    const prevState = this.states.get(clientID);\n    if (state === null) {\n      this.states.delete(clientID);\n    } else {\n      this.states.set(clientID, state);\n    }\n    this.meta.set(clientID, {\n      clock,\n      lastUpdated: getUnixTime()\n    });\n    const added = [];\n    const updated = [];\n    const filteredUpdated = [];\n    const removed = [];\n    if (state === null) {\n      removed.push(clientID);\n    } else if (prevState == null) {\n      if (state != null) {\n        added.push(clientID);\n      }\n    } else {\n      updated.push(clientID);\n      if (!equalityDeep(prevState, state)) {\n        filteredUpdated.push(clientID);\n      }\n    }\n    if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n      this.emit('change', [{ added, updated: filteredUpdated, removed }, 'local']);\n    }\n    this.emit('update', [{ added, updated, removed }, 'local']);\n  }\n\n  /**\n   * @param {string} field\n   * @param {any} value\n   */\n  setLocalStateField (field, value) {\n    const state = this.getLocalState();\n    if (state !== null) {\n      this.setLocalState({\n        ...state,\n        [field]: value\n      });\n    }\n  }\n\n  /**\n   * @return {Map<number,Object<string,any>>}\n   */\n  getStates () {\n    return this.states\n  }\n}\n\n/**\n * Mark (remote) clients as inactive and remove them from the list of active peers.\n * This change will be propagated to remote clients.\n *\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @param {any} origin\n */\nconst removeAwarenessStates = (awareness, clients, origin) => {\n  const removed = [];\n  for (let i = 0; i < clients.length; i++) {\n    const clientID = clients[i];\n    if (awareness.states.has(clientID)) {\n      awareness.states.delete(clientID);\n      if (clientID === awareness.clientID) {\n        const curMeta = /** @type {MetaClientState} */ (awareness.meta.get(clientID));\n        awareness.meta.set(clientID, {\n          clock: curMeta.clock + 1,\n          lastUpdated: getUnixTime()\n        });\n      }\n      removed.push(clientID);\n    }\n  }\n  if (removed.length > 0) {\n    awareness.emit('change', [{ added: [], updated: [], removed }, origin]);\n    awareness.emit('update', [{ added: [], updated: [], removed }, origin]);\n  }\n};\n\n/**\n * @param {Awareness} awareness\n * @param {Array<number>} clients\n * @return {Uint8Array}\n */\nconst encodeAwarenessUpdate = (awareness, clients, states = awareness.states) => {\n  const len = clients.length;\n  const encoder = createEncoder();\n  writeVarUint(encoder, len);\n  for (let i = 0; i < len; i++) {\n    const clientID = clients[i];\n    const state = states.get(clientID) || null;\n    const clock = /** @type {MetaClientState} */ (awareness.meta.get(clientID)).clock;\n    writeVarUint(encoder, clientID);\n    writeVarUint(encoder, clock);\n    writeVarString(encoder, JSON.stringify(state));\n  }\n  return toUint8Array(encoder)\n};\n\n/**\n * @param {Awareness} awareness\n * @param {Uint8Array} update\n * @param {any} origin This will be added to the emitted change event\n */\nconst applyAwarenessUpdate = (awareness, update, origin) => {\n  const decoder = createDecoder(update);\n  const timestamp = getUnixTime();\n  const added = [];\n  const updated = [];\n  const filteredUpdated = [];\n  const removed = [];\n  const len = readVarUint(decoder);\n  for (let i = 0; i < len; i++) {\n    const clientID = readVarUint(decoder);\n    let clock = readVarUint(decoder);\n    const state = JSON.parse(readVarString(decoder));\n    const clientMeta = awareness.meta.get(clientID);\n    const prevState = awareness.states.get(clientID);\n    const currClock = clientMeta === undefined ? 0 : clientMeta.clock;\n    if (currClock < clock || (currClock === clock && state === null && awareness.states.has(clientID))) {\n      if (state === null) {\n        // never let a remote client remove this local state\n        if (clientID === awareness.clientID && awareness.getLocalState() != null) {\n          // remote client removed the local state. Do not remote state. Broadcast a message indicating\n          // that this client still exists by increasing the clock\n          clock++;\n        } else {\n          awareness.states.delete(clientID);\n        }\n      } else {\n        awareness.states.set(clientID, state);\n      }\n      awareness.meta.set(clientID, {\n        clock,\n        lastUpdated: timestamp\n      });\n      if (clientMeta === undefined && state !== null) {\n        added.push(clientID);\n      } else if (clientMeta !== undefined && state === null) {\n        removed.push(clientID);\n      } else if (state !== null) {\n        if (!equalityDeep(state, prevState)) {\n          filteredUpdated.push(clientID);\n        }\n        updated.push(clientID);\n      }\n    }\n  }\n  if (added.length > 0 || filteredUpdated.length > 0 || removed.length > 0) {\n    awareness.emit('change', [{\n      added, updated: filteredUpdated, removed\n    }, origin]);\n  }\n  if (added.length > 0 || updated.length > 0 || removed.length > 0) {\n    awareness.emit('update', [{\n      added, updated, removed\n    }, origin]);\n  }\n};\n\nclass EventEmitter {\n    constructor() {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n        this.callbacks = {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    on(event, fn) {\n        if (!this.callbacks[event]) {\n            this.callbacks[event] = [];\n        }\n        this.callbacks[event].push(fn);\n        return this;\n    }\n    emit(event, ...args) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            callbacks.forEach(callback => callback.apply(this, args));\n        }\n        return this;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    off(event, fn) {\n        const callbacks = this.callbacks[event];\n        if (callbacks) {\n            if (fn) {\n                this.callbacks[event] = callbacks.filter(callback => callback !== fn);\n            }\n            else {\n                delete this.callbacks[event];\n            }\n        }\n        return this;\n    }\n    removeAllListeners() {\n        this.callbacks = {};\n    }\n}\n\nclass IncomingMessage {\n    constructor(data) {\n        this.data = data;\n        this.encoder = createEncoder();\n        this.decoder = createDecoder(new Uint8Array(this.data));\n    }\n    peekVarString() {\n        return peekVarString(this.decoder);\n    }\n    readVarUint() {\n        return readVarUint(this.decoder);\n    }\n    readVarString() {\n        return readVarString(this.decoder);\n    }\n    readVarUint8Array() {\n        return readVarUint8Array(this.decoder);\n    }\n    writeVarUint(type) {\n        return writeVarUint(this.encoder, type);\n    }\n    writeVarString(string) {\n        return writeVarString(this.encoder, string);\n    }\n    writeVarUint8Array(data) {\n        return writeVarUint8Array(this.encoder, data);\n    }\n    length() {\n        return length$1(this.encoder);\n    }\n}\n\nvar MessageType;\n(function (MessageType) {\n    MessageType[MessageType[\"Sync\"] = 0] = \"Sync\";\n    MessageType[MessageType[\"Awareness\"] = 1] = \"Awareness\";\n    MessageType[MessageType[\"Auth\"] = 2] = \"Auth\";\n    MessageType[MessageType[\"QueryAwareness\"] = 3] = \"QueryAwareness\";\n    MessageType[MessageType[\"Stateless\"] = 5] = \"Stateless\";\n    MessageType[MessageType[\"CLOSE\"] = 7] = \"CLOSE\";\n    MessageType[MessageType[\"SyncStatus\"] = 8] = \"SyncStatus\";\n})(MessageType || (MessageType = {}));\nvar WebSocketStatus;\n(function (WebSocketStatus) {\n    WebSocketStatus[\"Connecting\"] = \"connecting\";\n    WebSocketStatus[\"Connected\"] = \"connected\";\n    WebSocketStatus[\"Disconnected\"] = \"disconnected\";\n})(WebSocketStatus || (WebSocketStatus = {}));\n\nclass OutgoingMessage {\n    constructor() {\n        this.encoder = createEncoder();\n    }\n    get(args) {\n        return args.encoder;\n    }\n    toUint8Array() {\n        return toUint8Array(this.encoder);\n    }\n}\n\nclass CloseMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.CLOSE;\n        this.description = 'Ask the server to close the connection';\n    }\n    get(args) {\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        return this.encoder;\n    }\n}\n\nclass HocuspocusProviderWebsocket extends EventEmitter {\n    constructor(configuration) {\n        super();\n        this.messageQueue = [];\n        this.configuration = {\n            url: \"\",\n            // @ts-ignore\n            document: undefined,\n            WebSocketPolyfill: undefined,\n            // TODO: this should depend on awareness.outdatedTime\n            messageReconnectTimeout: 30000,\n            // 1 second\n            delay: 1000,\n            // instant\n            initialDelay: 0,\n            // double the delay each time\n            factor: 2,\n            // unlimited retries\n            maxAttempts: 0,\n            // wait at least 1 second\n            minDelay: 1000,\n            // at least every 30 seconds\n            maxDelay: 30000,\n            // randomize\n            jitter: true,\n            // retry forever\n            timeout: 0,\n            onOpen: () => null,\n            onConnect: () => null,\n            onMessage: () => null,\n            onOutgoingMessage: () => null,\n            onStatus: () => null,\n            onDisconnect: () => null,\n            onClose: () => null,\n            onDestroy: () => null,\n            onAwarenessUpdate: () => null,\n            onAwarenessChange: () => null,\n            providerMap: new Map(),\n        };\n        this.webSocket = null;\n        this.webSocketHandlers = {};\n        this.shouldConnect = true;\n        this.status = WebSocketStatus.Disconnected;\n        this.lastMessageReceived = 0;\n        this.identifier = 0;\n        this.intervals = {\n            connectionChecker: null,\n        };\n        this.connectionAttempt = null;\n        this.receivedOnOpenPayload = undefined;\n        this.closeTries = 0;\n        this.setConfiguration(configuration);\n        this.configuration.WebSocketPolyfill = configuration.WebSocketPolyfill\n            ? configuration.WebSocketPolyfill\n            : WebSocket;\n        this.on(\"open\", this.configuration.onOpen);\n        this.on(\"open\", this.onOpen.bind(this));\n        this.on(\"connect\", this.configuration.onConnect);\n        this.on(\"message\", this.configuration.onMessage);\n        this.on(\"outgoingMessage\", this.configuration.onOutgoingMessage);\n        this.on(\"status\", this.configuration.onStatus);\n        this.on(\"disconnect\", this.configuration.onDisconnect);\n        this.on(\"close\", this.configuration.onClose);\n        this.on(\"destroy\", this.configuration.onDestroy);\n        this.on(\"awarenessUpdate\", this.configuration.onAwarenessUpdate);\n        this.on(\"awarenessChange\", this.configuration.onAwarenessChange);\n        this.on(\"close\", this.onClose.bind(this));\n        this.on(\"message\", this.onMessage.bind(this));\n        this.intervals.connectionChecker = setInterval(this.checkConnection.bind(this), this.configuration.messageReconnectTimeout / 10);\n        if (!this.shouldConnect) {\n            return;\n        }\n        this.connect();\n    }\n    async onOpen(event) {\n        this.cancelWebsocketRetry = undefined;\n        this.receivedOnOpenPayload = event;\n    }\n    attach(provider) {\n        this.configuration.providerMap.set(provider.configuration.name, provider);\n        if (this.status === WebSocketStatus.Disconnected && this.shouldConnect) {\n            this.connect();\n        }\n        if (this.receivedOnOpenPayload &&\n            this.status === WebSocketStatus.Connected) {\n            provider.onOpen(this.receivedOnOpenPayload);\n        }\n    }\n    detach(provider) {\n        if (this.configuration.providerMap.has(provider.configuration.name)) {\n            provider.send(CloseMessage, {\n                documentName: provider.configuration.name,\n            });\n            this.configuration.providerMap.delete(provider.configuration.name);\n        }\n    }\n    setConfiguration(configuration = {}) {\n        this.configuration = { ...this.configuration, ...configuration };\n    }\n    async connect() {\n        if (this.status === WebSocketStatus.Connected) {\n            return;\n        }\n        // Always cancel any previously initiated connection retryer instances\n        if (this.cancelWebsocketRetry) {\n            this.cancelWebsocketRetry();\n            this.cancelWebsocketRetry = undefined;\n        }\n        this.receivedOnOpenPayload = undefined;\n        this.shouldConnect = true;\n        const abortableRetry = () => {\n            let cancelAttempt = false;\n            const retryPromise = (0,_lifeomic_attempt__WEBPACK_IMPORTED_MODULE_1__.retry)(this.createWebSocketConnection.bind(this), {\n                delay: this.configuration.delay,\n                initialDelay: this.configuration.initialDelay,\n                factor: this.configuration.factor,\n                maxAttempts: this.configuration.maxAttempts,\n                minDelay: this.configuration.minDelay,\n                maxDelay: this.configuration.maxDelay,\n                jitter: this.configuration.jitter,\n                timeout: this.configuration.timeout,\n                beforeAttempt: (context) => {\n                    if (!this.shouldConnect || cancelAttempt) {\n                        context.abort();\n                    }\n                },\n            }).catch((error) => {\n                // If we aborted the connection attempt then don’t throw an error\n                // ref: https://github.com/lifeomic/attempt/blob/master/src/index.ts#L136\n                if (error && error.code !== \"ATTEMPT_ABORTED\") {\n                    throw error;\n                }\n            });\n            return {\n                retryPromise,\n                cancelFunc: () => {\n                    cancelAttempt = true;\n                },\n            };\n        };\n        const { retryPromise, cancelFunc } = abortableRetry();\n        this.cancelWebsocketRetry = cancelFunc;\n        return retryPromise;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n    attachWebSocketListeners(ws, reject) {\n        const { identifier } = ws;\n        const onMessageHandler = (payload) => this.emit(\"message\", payload);\n        const onCloseHandler = (payload) => this.emit(\"close\", { event: payload });\n        const onOpenHandler = (payload) => this.emit(\"open\", payload);\n        const onErrorHandler = (err) => {\n            reject(err);\n        };\n        this.webSocketHandlers[identifier] = {\n            message: onMessageHandler,\n            close: onCloseHandler,\n            open: onOpenHandler,\n            error: onErrorHandler,\n        };\n        const handlers = this.webSocketHandlers[ws.identifier];\n        Object.keys(handlers).forEach((name) => {\n            ws.addEventListener(name, handlers[name]);\n        });\n    }\n    cleanupWebSocket() {\n        if (!this.webSocket) {\n            return;\n        }\n        const { identifier } = this.webSocket;\n        const handlers = this.webSocketHandlers[identifier];\n        Object.keys(handlers).forEach((name) => {\n            var _a;\n            (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.removeEventListener(name, handlers[name]);\n            delete this.webSocketHandlers[identifier];\n        });\n        this.webSocket.close();\n        this.webSocket = null;\n    }\n    createWebSocketConnection() {\n        return new Promise((resolve, reject) => {\n            if (this.webSocket) {\n                this.messageQueue = [];\n                this.cleanupWebSocket();\n            }\n            this.lastMessageReceived = 0;\n            this.identifier += 1;\n            // Init the WebSocket connection\n            const ws = new this.configuration.WebSocketPolyfill(this.url);\n            ws.binaryType = \"arraybuffer\";\n            ws.identifier = this.identifier;\n            this.attachWebSocketListeners(ws, reject);\n            this.webSocket = ws;\n            // Reset the status\n            this.status = WebSocketStatus.Connecting;\n            this.emit(\"status\", { status: WebSocketStatus.Connecting });\n            // Store resolve/reject for later use\n            this.connectionAttempt = {\n                resolve,\n                reject,\n            };\n        });\n    }\n    onMessage(event) {\n        var _a;\n        this.resolveConnectionAttempt();\n        this.lastMessageReceived = getUnixTime();\n        const message = new IncomingMessage(event.data);\n        const documentName = message.peekVarString();\n        (_a = this.configuration.providerMap.get(documentName)) === null || _a === void 0 ? void 0 : _a.onMessage(event);\n    }\n    resolveConnectionAttempt() {\n        if (this.connectionAttempt) {\n            this.connectionAttempt.resolve();\n            this.connectionAttempt = null;\n            this.status = WebSocketStatus.Connected;\n            this.emit(\"status\", { status: WebSocketStatus.Connected });\n            this.emit(\"connect\");\n            this.messageQueue.forEach((message) => this.send(message));\n            this.messageQueue = [];\n        }\n    }\n    stopConnectionAttempt() {\n        this.connectionAttempt = null;\n    }\n    rejectConnectionAttempt() {\n        var _a;\n        (_a = this.connectionAttempt) === null || _a === void 0 ? void 0 : _a.reject();\n        this.connectionAttempt = null;\n    }\n    checkConnection() {\n        var _a;\n        // Don’t check the connection when it’s not even established\n        if (this.status !== WebSocketStatus.Connected) {\n            return;\n        }\n        // Don’t close the connection while waiting for the first message\n        if (!this.lastMessageReceived) {\n            return;\n        }\n        // Don’t close the connection when a message was received recently\n        if (this.configuration.messageReconnectTimeout >=\n            getUnixTime() - this.lastMessageReceived) {\n            return;\n        }\n        // No message received in a long time, not even your own\n        // Awareness updates, which are updated every 15 seconds\n        // if awareness is enabled.\n        this.closeTries += 1;\n        // https://bugs.webkit.org/show_bug.cgi?id=247943\n        if (this.closeTries > 2) {\n            this.onClose({\n                event: {\n                    code: 4408,\n                    reason: \"forced\",\n                },\n            });\n            this.closeTries = 0;\n        }\n        else {\n            (_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.close();\n            this.messageQueue = [];\n        }\n    }\n    // Ensure that the URL never ends with /\n    get serverUrl() {\n        while (this.configuration.url[this.configuration.url.length - 1] === \"/\") {\n            return this.configuration.url.slice(0, this.configuration.url.length - 1);\n        }\n        return this.configuration.url;\n    }\n    get url() {\n        return this.serverUrl;\n    }\n    disconnect() {\n        this.shouldConnect = false;\n        if (this.webSocket === null) {\n            return;\n        }\n        try {\n            this.webSocket.close();\n            this.messageQueue = [];\n        }\n        catch (e) {\n            console.error(e);\n        }\n    }\n    send(message) {\n        var _a;\n        if (((_a = this.webSocket) === null || _a === void 0 ? void 0 : _a.readyState) === _hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__.WsReadyStates.Open) {\n            this.webSocket.send(message);\n        }\n        else {\n            this.messageQueue.push(message);\n        }\n    }\n    onClose({ event }) {\n        this.closeTries = 0;\n        this.cleanupWebSocket();\n        if (this.connectionAttempt) {\n            // That connection attempt failed.\n            this.rejectConnectionAttempt();\n        }\n        // Let’s update the connection status.\n        this.status = WebSocketStatus.Disconnected;\n        this.emit(\"status\", { status: WebSocketStatus.Disconnected });\n        this.emit(\"disconnect\", { event });\n        // trigger connect if no retry is running and we want to have a connection\n        if (!this.cancelWebsocketRetry && this.shouldConnect) {\n            setTimeout(() => {\n                this.connect();\n            }, this.configuration.delay);\n        }\n    }\n    destroy() {\n        this.emit(\"destroy\");\n        clearInterval(this.intervals.connectionChecker);\n        // If there is still a connection attempt outstanding then we should stop\n        // it before calling disconnect, otherwise it will be rejected in the onClose\n        // handler and trigger a retry\n        this.stopConnectionAttempt();\n        this.disconnect();\n        this.removeAllListeners();\n        this.cleanupWebSocket();\n    }\n}\n\n/**\n * @module sync-protocol\n */\n\n\n/**\n * @typedef {Map<number, number>} StateMap\n */\n\n/**\n * Core Yjs defines two message types:\n * • YjsSyncStep1: Includes the State Set of the sending client. When received, the client should reply with YjsSyncStep2.\n * • YjsSyncStep2: Includes all missing structs and the complete delete set. When received, the client is assured that it\n *   received all information from the remote client.\n *\n * In a peer-to-peer network, you may want to introduce a SyncDone message type. Both parties should initiate the connection\n * with SyncStep1. When a client received SyncStep2, it should reply with SyncDone. When the local client received both\n * SyncStep2 and SyncDone, it is assured that it is synced to the remote client.\n *\n * In a client-server model, you want to handle this differently: The client should initiate the connection with SyncStep1.\n * When the server receives SyncStep1, it should reply with SyncStep2 immediately followed by SyncStep1. The client replies\n * with SyncStep2 when it receives SyncStep1. Optionally the server may send a SyncDone after it received SyncStep2, so the\n * client knows that the sync is finished.  There are two reasons for this more elaborated sync model: 1. This protocol can\n * easily be implemented on top of http and websockets. 2. The server should only reply to requests, and not initiate them.\n * Therefore it is necessary that the client initiates the sync.\n *\n * Construction of a message:\n * [messageType : varUint, message definition..]\n *\n * Note: A message does not include information about the room name. This must to be handled by the upper layer protocol!\n *\n * stringify[messageType] stringifies a message definition (messageType is already read from the bufffer)\n */\n\nconst messageYjsSyncStep1 = 0;\nconst messageYjsSyncStep2 = 1;\nconst messageYjsUpdate = 2;\n\n/**\n * Create a sync step 1 message based on the state of the current shared document.\n *\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n */\nconst writeSyncStep1 = (encoder, doc) => {\n  writeVarUint(encoder, messageYjsSyncStep1);\n  const sv = yjs__WEBPACK_IMPORTED_MODULE_2__.encodeStateVector(doc);\n  writeVarUint8Array(encoder, sv);\n};\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Y.Doc} doc\n * @param {Uint8Array} [encodedStateVector]\n */\nconst writeSyncStep2 = (encoder, doc, encodedStateVector) => {\n  writeVarUint(encoder, messageYjsSyncStep2);\n  writeVarUint8Array(encoder, yjs__WEBPACK_IMPORTED_MODULE_2__.encodeStateAsUpdate(doc, encodedStateVector));\n};\n\n/**\n * Read SyncStep1 message and reply with SyncStep2.\n *\n * @param {decoding.Decoder} decoder The reply to the received message\n * @param {encoding.Encoder} encoder The received message\n * @param {Y.Doc} doc\n */\nconst readSyncStep1 = (decoder, encoder, doc) =>\n  writeSyncStep2(encoder, doc, readVarUint8Array(decoder));\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nconst readSyncStep2 = (decoder, doc, transactionOrigin) => {\n  try {\n    yjs__WEBPACK_IMPORTED_MODULE_2__.applyUpdate(doc, readVarUint8Array(decoder), transactionOrigin);\n  } catch (error) {\n    // This catches errors that are thrown by event handlers\n    console.error('Caught error while handling a Yjs update', error);\n  }\n};\n\n/**\n * @param {encoding.Encoder} encoder\n * @param {Uint8Array} update\n */\nconst writeUpdate = (encoder, update) => {\n  writeVarUint(encoder, messageYjsUpdate);\n  writeVarUint8Array(encoder, update);\n};\n\n/**\n * Read and apply Structs and then DeleteStore to a y instance.\n *\n * @param {decoding.Decoder} decoder\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nconst readUpdate = readSyncStep2;\n\n/**\n * @param {decoding.Decoder} decoder A message received from another client\n * @param {encoding.Encoder} encoder The reply message. Does not need to be sent if empty.\n * @param {Y.Doc} doc\n * @param {any} transactionOrigin\n */\nconst readSyncMessage = (decoder, encoder, doc, transactionOrigin) => {\n  const messageType = readVarUint(decoder);\n  switch (messageType) {\n    case messageYjsSyncStep1:\n      readSyncStep1(decoder, encoder, doc);\n      break\n    case messageYjsSyncStep2:\n      readSyncStep2(decoder, doc, transactionOrigin);\n      break\n    case messageYjsUpdate:\n      readUpdate(decoder, doc, transactionOrigin);\n      break\n    default:\n      throw new Error('Unknown message type')\n  }\n  return messageType\n};\n\nclass MessageReceiver {\n    constructor(message) {\n        this.message = message;\n    }\n    apply(provider, emitSynced) {\n        const { message } = this;\n        const type = message.readVarUint();\n        const emptyMessageLength = message.length();\n        switch (type) {\n            case MessageType.Sync:\n                this.applySyncMessage(provider, emitSynced);\n                break;\n            case MessageType.Awareness:\n                this.applyAwarenessMessage(provider);\n                break;\n            case MessageType.Auth:\n                this.applyAuthMessage(provider);\n                break;\n            case MessageType.QueryAwareness:\n                this.applyQueryAwarenessMessage(provider);\n                break;\n            case MessageType.Stateless:\n                provider.receiveStateless(readVarString(message.decoder));\n                break;\n            case MessageType.SyncStatus:\n                this.applySyncStatusMessage(provider, readVarInt(message.decoder) === 1);\n                break;\n            case MessageType.CLOSE:\n                // eslint-disable-next-line no-case-declarations\n                const event = {\n                    code: 1000,\n                    reason: readVarString(message.decoder),\n                    // @ts-ignore\n                    target: provider.configuration.websocketProvider.webSocket,\n                    type: 'close',\n                };\n                provider.onClose();\n                provider.configuration.onClose({ event });\n                provider.forwardClose(event);\n                break;\n            default:\n                throw new Error(`Can’t apply message of unknown type: ${type}`);\n        }\n        // Reply\n        if (message.length() > emptyMessageLength + 1) { // length of documentName (considered in emptyMessageLength plus length of yjs sync type, set in applySyncMessage)\n            // @ts-ignore\n            provider.send(OutgoingMessage, { encoder: message.encoder });\n        }\n    }\n    applySyncMessage(provider, emitSynced) {\n        const { message } = this;\n        message.writeVarUint(MessageType.Sync);\n        // Apply update\n        const syncMessageType = readSyncMessage(message.decoder, message.encoder, provider.document, provider);\n        // Synced once we receive Step2\n        if (emitSynced && syncMessageType === messageYjsSyncStep2) {\n            provider.synced = true;\n        }\n    }\n    applySyncStatusMessage(provider, applied) {\n        if (applied) {\n            provider.decrementUnsyncedChanges();\n        }\n    }\n    applyAwarenessMessage(provider) {\n        if (!provider.awareness)\n            return;\n        const { message } = this;\n        applyAwarenessUpdate(provider.awareness, message.readVarUint8Array(), provider);\n    }\n    applyAuthMessage(provider) {\n        const { message } = this;\n        (0,_hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__.readAuthMessage)(message.decoder, provider.permissionDeniedHandler.bind(provider), provider.authenticatedHandler.bind(provider));\n    }\n    applyQueryAwarenessMessage(provider) {\n        if (!provider.awareness)\n            return;\n        const { message } = this;\n        message.writeVarUint(MessageType.Awareness);\n        message.writeVarUint8Array(encodeAwarenessUpdate(provider.awareness, Array.from(provider.awareness.getStates().keys())));\n    }\n}\n\nclass MessageSender {\n    constructor(Message, args = {}) {\n        this.message = new Message();\n        this.encoder = this.message.get(args);\n    }\n    create() {\n        return toUint8Array(this.encoder);\n    }\n    send(webSocket) {\n        webSocket === null || webSocket === void 0 ? void 0 : webSocket.send(this.create());\n    }\n}\n\nclass AuthenticationMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.Auth;\n        this.description = 'Authentication';\n    }\n    get(args) {\n        if (typeof args.token === 'undefined') {\n            throw new Error('The authentication message requires `token` as an argument.');\n        }\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        (0,_hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__.writeAuthentication)(this.encoder, args.token);\n        return this.encoder;\n    }\n}\n\nclass AwarenessMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.Awareness;\n        this.description = 'Awareness states update';\n    }\n    get(args) {\n        if (typeof args.awareness === 'undefined') {\n            throw new Error('The awareness message requires awareness as an argument');\n        }\n        if (typeof args.clients === 'undefined') {\n            throw new Error('The awareness message requires clients as an argument');\n        }\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        let awarenessUpdate;\n        if (args.states === undefined) {\n            awarenessUpdate = encodeAwarenessUpdate(args.awareness, args.clients);\n        }\n        else {\n            awarenessUpdate = encodeAwarenessUpdate(args.awareness, args.clients, args.states);\n        }\n        writeVarUint8Array(this.encoder, awarenessUpdate);\n        return this.encoder;\n    }\n}\n\nclass StatelessMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.Stateless;\n        this.description = 'A stateless message';\n    }\n    get(args) {\n        var _a;\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        writeVarString(this.encoder, (_a = args.payload) !== null && _a !== void 0 ? _a : '');\n        return this.encoder;\n    }\n}\n\nclass SyncStepOneMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.Sync;\n        this.description = 'First sync step';\n    }\n    get(args) {\n        if (typeof args.document === 'undefined') {\n            throw new Error('The sync step one message requires document as an argument');\n        }\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        writeSyncStep1(this.encoder, args.document);\n        return this.encoder;\n    }\n}\n\nclass UpdateMessage extends OutgoingMessage {\n    constructor() {\n        super(...arguments);\n        this.type = MessageType.Sync;\n        this.description = 'A document update';\n    }\n    get(args) {\n        writeVarString(this.encoder, args.documentName);\n        writeVarUint(this.encoder, this.type);\n        writeUpdate(this.encoder, args.update);\n        return this.encoder;\n    }\n}\n\nclass AwarenessError extends Error {\n    constructor() {\n        super(...arguments);\n        this.code = 1001;\n    }\n}\nclass HocuspocusProvider extends EventEmitter {\n    constructor(configuration) {\n        var _a, _b, _c;\n        super();\n        this.configuration = {\n            name: '',\n            // @ts-ignore\n            document: undefined,\n            // @ts-ignore\n            awareness: undefined,\n            token: null,\n            forceSyncInterval: false,\n            onAuthenticated: () => null,\n            onAuthenticationFailed: () => null,\n            onOpen: () => null,\n            onConnect: () => null,\n            onMessage: () => null,\n            onOutgoingMessage: () => null,\n            onSynced: () => null,\n            onDisconnect: () => null,\n            onClose: () => null,\n            onDestroy: () => null,\n            onAwarenessUpdate: () => null,\n            onAwarenessChange: () => null,\n            onStateless: () => null,\n            onUnsyncedChanges: () => null,\n        };\n        this.isSynced = false;\n        this.unsyncedChanges = 0;\n        this.isAuthenticated = false;\n        this.authorizedScope = undefined;\n        // @internal\n        this.manageSocket = false;\n        this._isAttached = false;\n        this.intervals = {\n            forceSync: null,\n        };\n        this.boundDocumentUpdateHandler = this.documentUpdateHandler.bind(this);\n        this.boundAwarenessUpdateHandler = this.awarenessUpdateHandler.bind(this);\n        this.boundPageHide = this.pageHide.bind(this);\n        this.boundOnOpen = this.onOpen.bind(this);\n        this.boundOnClose = this.onClose.bind(this);\n        this.forwardConnect = (e) => this.emit('connect', e);\n        this.forwardClose = (e) => this.emit('close', e);\n        this.forwardDisconnect = (e) => this.emit('disconnect', e);\n        this.forwardDestroy = (e) => this.emit('destroy', e);\n        this.setConfiguration(configuration);\n        this.configuration.document = configuration.document ? configuration.document : new yjs__WEBPACK_IMPORTED_MODULE_2__.Doc();\n        this.configuration.awareness = configuration.awareness !== undefined ? configuration.awareness : new Awareness(this.document);\n        this.on('open', this.configuration.onOpen);\n        this.on('message', this.configuration.onMessage);\n        this.on('outgoingMessage', this.configuration.onOutgoingMessage);\n        this.on('synced', this.configuration.onSynced);\n        this.on('destroy', this.configuration.onDestroy);\n        this.on('awarenessUpdate', this.configuration.onAwarenessUpdate);\n        this.on('awarenessChange', this.configuration.onAwarenessChange);\n        this.on('stateless', this.configuration.onStateless);\n        this.on('unsyncedChanges', this.configuration.onUnsyncedChanges);\n        this.on('authenticated', this.configuration.onAuthenticated);\n        this.on('authenticationFailed', this.configuration.onAuthenticationFailed);\n        (_a = this.awareness) === null || _a === void 0 ? void 0 : _a.on('update', () => {\n            this.emit('awarenessUpdate', { states: (0,_hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__.awarenessStatesToArray)(this.awareness.getStates()) });\n        });\n        (_b = this.awareness) === null || _b === void 0 ? void 0 : _b.on('change', () => {\n            this.emit('awarenessChange', { states: (0,_hocuspocus_common__WEBPACK_IMPORTED_MODULE_0__.awarenessStatesToArray)(this.awareness.getStates()) });\n        });\n        this.document.on('update', this.boundDocumentUpdateHandler);\n        (_c = this.awareness) === null || _c === void 0 ? void 0 : _c.on('update', this.boundAwarenessUpdateHandler);\n        this.registerEventListeners();\n        if (this.configuration.forceSyncInterval\n            && typeof this.configuration.forceSyncInterval === 'number') {\n            this.intervals.forceSync = setInterval(this.forceSync.bind(this), this.configuration.forceSyncInterval);\n        }\n        if (this.manageSocket) {\n            this.attach();\n        }\n    }\n    setConfiguration(configuration = {}) {\n        if (!configuration.websocketProvider) {\n            const websocketProviderConfig = configuration;\n            this.manageSocket = true;\n            this.configuration.websocketProvider = new HocuspocusProviderWebsocket({\n                url: websocketProviderConfig.url,\n            });\n        }\n        this.configuration = { ...this.configuration, ...configuration };\n    }\n    get document() {\n        return this.configuration.document;\n    }\n    get isAttached() {\n        return this._isAttached;\n    }\n    get awareness() {\n        return this.configuration.awareness;\n    }\n    get hasUnsyncedChanges() {\n        return this.unsyncedChanges > 0;\n    }\n    resetUnsyncedChanges() {\n        this.unsyncedChanges = 1;\n        this.emit('unsyncedChanges', { number: this.unsyncedChanges });\n    }\n    incrementUnsyncedChanges() {\n        this.unsyncedChanges += 1;\n        this.emit('unsyncedChanges', { number: this.unsyncedChanges });\n    }\n    decrementUnsyncedChanges() {\n        if (this.unsyncedChanges > 0) {\n            this.unsyncedChanges -= 1;\n        }\n        if (this.unsyncedChanges === 0) {\n            this.synced = true;\n        }\n        this.emit('unsyncedChanges', { number: this.unsyncedChanges });\n    }\n    forceSync() {\n        this.resetUnsyncedChanges();\n        this.send(SyncStepOneMessage, { document: this.document, documentName: this.configuration.name });\n    }\n    pageHide() {\n        if (this.awareness) {\n            removeAwarenessStates(this.awareness, [this.document.clientID], 'page hide');\n        }\n    }\n    registerEventListeners() {\n        if (typeof window === 'undefined' || !('addEventListener' in window)) {\n            return;\n        }\n        window.addEventListener('pagehide', this.boundPageHide);\n    }\n    sendStateless(payload) {\n        this.send(StatelessMessage, { documentName: this.configuration.name, payload });\n    }\n    documentUpdateHandler(update, origin) {\n        if (origin === this) {\n            return;\n        }\n        this.incrementUnsyncedChanges();\n        this.send(UpdateMessage, { update, documentName: this.configuration.name });\n    }\n    awarenessUpdateHandler({ added, updated, removed }, origin) {\n        const changedClients = added.concat(updated).concat(removed);\n        this.send(AwarenessMessage, {\n            awareness: this.awareness,\n            clients: changedClients,\n            documentName: this.configuration.name,\n        });\n    }\n    /**\n     * Indicates whether a first handshake with the server has been established\n     *\n     * Note: this does not mean all updates from the client have been persisted to the backend. For this,\n     * use `hasUnsyncedChanges`.\n     */\n    get synced() {\n        return this.isSynced;\n    }\n    set synced(state) {\n        if (this.isSynced === state) {\n            return;\n        }\n        this.isSynced = state;\n        if (state) {\n            this.emit('synced', { state });\n        }\n    }\n    receiveStateless(payload) {\n        this.emit('stateless', { payload });\n    }\n    // not needed, but provides backward compatibility with e.g. lexical/yjs\n    async connect() {\n        if (this.manageSocket) {\n            return this.configuration.websocketProvider.connect();\n        }\n        console.warn('HocuspocusProvider::connect() is deprecated and does not do anything. Please connect/disconnect on the websocketProvider, or attach/deattach providers.');\n    }\n    disconnect() {\n        if (this.manageSocket) {\n            return this.configuration.websocketProvider.disconnect();\n        }\n        console.warn('HocuspocusProvider::disconnect() is deprecated and does not do anything. Please connect/disconnect on the websocketProvider, or attach/deattach providers.');\n    }\n    async onOpen(event) {\n        this.isAuthenticated = false;\n        this.emit('open', { event });\n        let token;\n        try {\n            token = await this.getToken();\n        }\n        catch (error) {\n            this.permissionDeniedHandler(`Failed to get token: ${error}`);\n            return;\n        }\n        this.send(AuthenticationMessage, {\n            token: token !== null && token !== void 0 ? token : '',\n            documentName: this.configuration.name,\n        });\n        this.startSync();\n    }\n    async getToken() {\n        if (typeof this.configuration.token === 'function') {\n            const token = await this.configuration.token();\n            return token;\n        }\n        return this.configuration.token;\n    }\n    startSync() {\n        this.resetUnsyncedChanges();\n        this.send(SyncStepOneMessage, { document: this.document, documentName: this.configuration.name });\n        if (this.awareness && this.awareness.getLocalState() !== null) {\n            this.send(AwarenessMessage, {\n                awareness: this.awareness,\n                clients: [this.document.clientID],\n                documentName: this.configuration.name,\n            });\n        }\n    }\n    send(message, args) {\n        if (!this._isAttached)\n            return;\n        const messageSender = new MessageSender(message, args);\n        this.emit('outgoingMessage', { message: messageSender.message });\n        messageSender.send(this.configuration.websocketProvider);\n    }\n    onMessage(event) {\n        const message = new IncomingMessage(event.data);\n        const documentName = message.readVarString();\n        message.writeVarString(documentName);\n        this.emit('message', { event, message: new IncomingMessage(event.data) });\n        new MessageReceiver(message).apply(this, true);\n    }\n    onClose() {\n        this.isAuthenticated = false;\n        this.synced = false;\n        // update awareness (all users except local left)\n        if (this.awareness) {\n            removeAwarenessStates(this.awareness, Array.from(this.awareness.getStates().keys()).filter(client => client !== this.document.clientID), this);\n        }\n    }\n    destroy() {\n        this.emit('destroy');\n        if (this.intervals.forceSync) {\n            clearInterval(this.intervals.forceSync);\n        }\n        if (this.awareness) {\n            removeAwarenessStates(this.awareness, [this.document.clientID], 'provider destroy');\n            this.awareness.off('update', this.boundAwarenessUpdateHandler);\n            this.awareness.destroy();\n        }\n        this.document.off('update', this.boundDocumentUpdateHandler);\n        this.removeAllListeners();\n        this.detach();\n        if (this.manageSocket) {\n            this.configuration.websocketProvider.destroy();\n        }\n        if (typeof window === 'undefined' || !('removeEventListener' in window)) {\n            return;\n        }\n        window.removeEventListener('pagehide', this.boundPageHide);\n    }\n    detach() {\n        this.configuration.websocketProvider.off('connect', this.configuration.onConnect);\n        this.configuration.websocketProvider.off('connect', this.forwardConnect);\n        this.configuration.websocketProvider.off('open', this.boundOnOpen);\n        this.configuration.websocketProvider.off('close', this.boundOnClose);\n        this.configuration.websocketProvider.off('close', this.configuration.onClose);\n        this.configuration.websocketProvider.off('close', this.forwardClose);\n        this.configuration.websocketProvider.off('disconnect', this.configuration.onDisconnect);\n        this.configuration.websocketProvider.off('disconnect', this.forwardDisconnect);\n        this.configuration.websocketProvider.off('destroy', this.configuration.onDestroy);\n        this.configuration.websocketProvider.off('destroy', this.forwardDestroy);\n        this.configuration.websocketProvider.detach(this);\n        this._isAttached = false;\n    }\n    attach() {\n        if (this._isAttached)\n            return;\n        this.configuration.websocketProvider.on('connect', this.configuration.onConnect);\n        this.configuration.websocketProvider.on('connect', this.forwardConnect);\n        this.configuration.websocketProvider.on('open', this.boundOnOpen);\n        this.configuration.websocketProvider.on('close', this.boundOnClose);\n        this.configuration.websocketProvider.on('close', this.configuration.onClose);\n        this.configuration.websocketProvider.on('close', this.forwardClose);\n        this.configuration.websocketProvider.on('disconnect', this.configuration.onDisconnect);\n        this.configuration.websocketProvider.on('disconnect', this.forwardDisconnect);\n        this.configuration.websocketProvider.on('destroy', this.configuration.onDestroy);\n        this.configuration.websocketProvider.on('destroy', this.forwardDestroy);\n        this.configuration.websocketProvider.attach(this);\n        this._isAttached = true;\n    }\n    permissionDeniedHandler(reason) {\n        this.emit('authenticationFailed', { reason });\n        this.isAuthenticated = false;\n    }\n    authenticatedHandler(scope) {\n        this.isAuthenticated = true;\n        this.authorizedScope = scope;\n        this.emit('authenticated', { scope });\n    }\n    setAwarenessField(key, value) {\n        if (!this.awareness) {\n            throw new AwarenessError(`Cannot set awareness field \"${key}\" to ${JSON.stringify(value)}. You have disabled Awareness for this provider by explicitly passing awareness: null in the provider configuration.`);\n        }\n        this.awareness.setLocalStateField(key, value);\n    }\n}\n\n\n//# sourceMappingURL=hocuspocus-provider.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@hocuspocus/provider/dist/hocuspocus-provider.esm.js\n");

/***/ })

};
;