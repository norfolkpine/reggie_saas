#!/bin/bash
# Check VM status and prepare SSH keys for multi-cloud GitHub Actions deployment
# Usage: bash deploy/check-vm-status.sh
set -euo pipefail

# Look for deployment.env in project root (generated by Terraform)
DEPLOY_ENV="$(dirname "$0")/../deployment.env"
if [ -f "$DEPLOY_ENV" ]; then
  echo "Sourcing deployment environment from $DEPLOY_ENV"
  set -a
  source "$DEPLOY_ENV"
  set +a
else
  echo "Warning: deployment.env not found. Run './deploy/generate-deployment-env.sh' first."
  echo "Using default values..."
fi

VM_NAME=${VM_NAME:-opie-stack-vm}
ZONE=${ZONE:-australia-southeast1}
MACHINE_TYPE=${MACHINE_TYPE:-e2-medium}
IMAGE_FAMILY=${IMAGE_FAMILY:-ubuntu-2204-lts}
IMAGE_PROJECT=${IMAGE_PROJECT:-ubuntu-os-cloud}
PROJECT_ID=${PROJECT_ID:-bh-opie}

# 1. VM is now managed by Terraform - verify it exists
if ! gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" >/dev/null 2>&1; then
  echo "ERROR: VM $VM_NAME does not exist!"
  echo "Please run Terraform first to create the infrastructure:"
  echo "  cd infra/envs/prod"
  echo "  terraform init"
  echo "  terraform apply"
  exit 1
else
  echo "VM $VM_NAME exists (managed by Terraform). Proceeding with setup..."
fi

# 2. Docker and Docker Compose are now installed by Terraform startup script
echo "Checking if Docker setup is complete..."
if gcloud compute ssh "ubuntu@$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --command="test -f /var/log/docker-setup-complete" 2>/dev/null; then
  echo "Docker and Docker Compose are already installed (via Terraform startup script)."
else
  echo "Docker setup may still be in progress. The startup script runs automatically when the VM is created."
  echo "You can check the status with:"
  echo "  gcloud compute ssh ubuntu@$VM_NAME --zone=$ZONE --project=$PROJECT_ID --command='sudo journalctl -u google-startup-scripts.service -f'"
fi

# 3. Generate SSH key for multi-cloud GitHub Actions deployment
SSH_KEY_PATH="$HOME/.ssh/github_actions_deploy"
if [ ! -f "$SSH_KEY_PATH" ]; then
  echo "Generating SSH key for multi-cloud GitHub Actions deployment..."
  ssh-keygen -t ed25519 -f "$SSH_KEY_PATH" -N "" -C "github-actions-deploy-$(date +%Y%m%d)"
  echo "SSH key pair generated:"
  echo "  Private key: $SSH_KEY_PATH"
  echo "  Public key:  $SSH_KEY_PATH.pub"
else
  echo "SSH key already exists at $SSH_KEY_PATH"
fi

# 4. Add public key to VM (for Google Cloud)
echo "Adding public key to VM for SSH access..."
if command -v gcloud >/dev/null 2>&1; then
  gcloud compute instances add-metadata "$VM_NAME" \
    --zone="$ZONE" \
    --project="$PROJECT_ID" \
    --metadata-from-file ssh-keys=<(echo "github-actions:$(cat $SSH_KEY_PATH.pub)")
  echo "Public key added to VM metadata"
else
  echo "gcloud not found. You'll need to manually add the public key to your VM:"
  echo "  cat $SSH_KEY_PATH.pub >> ~/.ssh/authorized_keys"
fi

# 5. Get VM external IP
VM_IP=$(gcloud compute instances describe "$VM_NAME" --zone="$ZONE" --project="$PROJECT_ID" --format="get(networkInterfaces[0].accessConfigs[0].natIP)" 2>/dev/null || echo "UNKNOWN")

echo ""
echo "VM is ready for multi-cloud GitHub Actions deployment!"
echo "Docker and Docker Compose are installed and ready to use."
echo ""
echo "GitHub Actions setup:"
echo "1. Add the SSH private key to GitHub repository secrets as 'VM_SSH_KEY':"
echo "   cat $SSH_KEY_PATH"
echo ""
echo "2. Add the VM's external IP to GitHub repository secrets as 'VM_HOST':"
echo "   $VM_IP"
echo ""
echo "3. Add the SSH username to GitHub repository secrets as 'VM_USER':"
echo "   ubuntu  # (or your VM username)"
echo ""
echo "4. Configure your GitHub Actions workflow to use these secrets"
echo ""
echo "This setup works with Google Cloud, AWS, Hetzner, and other cloud providers!"
