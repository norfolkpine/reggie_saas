#!/bin/bash
# Setup pgvector extension on Terraform-managed Cloud SQL instance
# Usage: bash deploy/gcp-create-cloudsql-pgvector.sh
# Sources deployment.env if present for shared variables
# NOTE: Cloud SQL instance is now managed by Terraform
set -euo pipefail

# Look for deployment.env in project root (generated by Terraform)
DEPLOY_ENV="$(dirname "$0")/../deployment.env"
if [ -f "$DEPLOY_ENV" ]; then
  echo "Sourcing deployment environment from $DEPLOY_ENV"
  set -a
  source "$DEPLOY_ENV"
  set +a
else
  echo "Warning: deployment.env not found. Run './deploy/generate-deployment-env.sh' first."
  echo "Using default values..."
fi

PROJECT_ID=${PROJECT_ID:-bh-opie}
REGION=${REGION:-australia-southeast1}
INSTANCE_NAME=${INSTANCE_NAME:-db0}
DB_NAME=${DB_NAME:-bh_opie_test}
DB_USER=${DB_USER:-opieuser}
DB_PASS=${DB_PASS:-CHANGE_ME}
PG_VERSION=POSTGRES_15
TIER=db-f1-micro
STORAGE=10

# Verify Cloud SQL instance exists (managed by Terraform)
if ! gcloud sql instances describe "$INSTANCE_NAME" --project="$PROJECT_ID" >/dev/null 2>&1; then
  echo "ERROR: Cloud SQL instance $INSTANCE_NAME does not exist!"
  echo "Please run Terraform first to create the infrastructure:"
  echo "  cd infra/envs/prod"
  echo "  terraform init"
  echo "  terraform apply"
  exit 1
else
  echo "Cloud SQL instance $INSTANCE_NAME exists (managed by Terraform). Proceeding with pgvector setup..."
fi

# Verify database exists (created by Terraform)
if ! gcloud sql databases describe "$DB_NAME" --instance="$INSTANCE_NAME" --project="$PROJECT_ID" >/dev/null 2>&1; then
  echo "ERROR: Database $DB_NAME does not exist!"
  echo "Please check your Terraform configuration includes the database creation."
  exit 1
else
  echo "Database $DB_NAME exists. Proceeding with pgvector setup..."
fi

# Create user if it doesn't exist (this is still manual as it's not in Terraform)
echo "Creating user ($DB_USER) if it doesn't exist..."
if ! gcloud sql users describe "$DB_USER" --instance="$INSTANCE_NAME" --project="$PROJECT_ID" >/dev/null 2>&1; then
  gcloud sql users create "$DB_USER" --instance="$INSTANCE_NAME" --password="$DB_PASS"
  echo "User $DB_USER created."
else
  echo "User $DB_USER already exists."
fi

# Enable pgvector extension (manual step required)
echo "\n==== Manual Step Required: Enable pgvector extension ===="
echo "Connect to your Cloud SQL instance and run:"
echo "\n  gcloud sql connect $INSTANCE_NAME --user=\$DB_USER --project=$PROJECT_ID --database=$DB_NAME\n"
echo "At the psql prompt, run:"
echo "\n  CREATE EXTENSION IF NOT EXISTS vector;\n"
echo "If you get a permission error, you may need to set a password for the 'postgres' user and connect as 'postgres'. See the script comments for details."

# IAM bindings are now managed by Terraform
echo "IAM bindings are managed by Terraform. Skipping manual IAM setup."

echo "Cloud SQL instance ($INSTANCE_NAME) setup complete."
echo "Remember to enable the pgvector extension manually as shown above."
