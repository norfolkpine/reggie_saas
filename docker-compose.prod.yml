services:
  # --- Cloud SQL Auth Proxy ---
  cloudsql-proxy:
    image: gcr.io/cloud-sql-connectors/cloud-sql-proxy:2.18.2
    container_name: cloudsql-proxy
    command: --private-ip --port 5432 --auto-iam-authn --address 0.0.0.0 --prometheus --http-port 9090 ${PROJECT_ID}:australia-southeast1:db0
    environment:
      # Use VM's default service account (Google-blessed approach)
      # No GOOGLE_APPLICATION_CREDENTIALS_JSON needed
      - GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
    ports:
      - "127.0.0.1:5432:5432"  # Bind to localhost only for security
      - "127.0.0.1:9090:9090"  # Prometheus metrics endpoint
    restart: unless-stopped
    stop_grace_period: 30s
    stop_signal: SIGTERM
    healthcheck:
      test: ["CMD", "/cloud-sql-proxy", "--help"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - app-network


  # --- Redis ---
  redis:
    image: redis:latest
    restart: unless-stopped
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    stop_grace_period: 30s
    stop_signal: SIGTERM
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - app-network

  # --- Web app ---
  web:
    image: ${ARTIFACT_REGISTRY_URL}/${IMAGE_NAME_WEB}:latest
    container_name: opie-web
    restart: unless-stopped
    # volumes:
      # Optional: Uncomment for persistent logs (not recommended for production)
      # - ./logs:/code/logs
    environment:
      # Use VM's default service account (Google-blessed approach)
      - GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
      - FORCE_GCP_DETECTION=${FORCE_GCP_DETECTION}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC}
      - SKIP_DATA_LOADING=${SKIP_DATA_LOADING}
      - SKIP_MIGRATIONS=${SKIP_MIGRATIONS}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/bh_opie
      - DJANGO_SETTINGS_MODULE=bh_opie.settings_production
      # GCS configuration comes from GCP Secret Manager at runtime
    ports:
      - "8000:8000"
      - "8443:8443"
    stop_grace_period: 30s
    stop_signal: SIGTERM
    dns:
      - 169.254.169.254
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "metadata.google.internal:169.254.169.254"
    depends_on:
      redis:
        condition: service_healthy
      cloudsql-proxy:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    networks:
      - app-network

  # --- Celery Worker ---
  celery-worker:
    image: ${ARTIFACT_REGISTRY_URL}/${IMAGE_NAME_WEB}:latest
    container_name: opie-celery-worker
    restart: unless-stopped
    command: celery -A bh_opie worker -l INFO --concurrency=2 --pool=prefork
    stop_grace_period: 30s
    stop_signal: SIGTERM
    environment:
      # Use VM's default service account (Google-blessed approach)
      - GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
      - FORCE_GCP_DETECTION=${FORCE_GCP_DETECTION}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC}
      - SKIP_DATA_LOADING=${SKIP_DATA_LOADING}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/bh_opie
      - DJANGO_SETTINGS_MODULE=bh_opie.settings_production
      # GCS configuration comes from GCP Secret Manager at runtime
    dns:
      - 169.254.169.254
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "metadata.google.internal:169.254.169.254"
    depends_on:
      redis:
        condition: service_healthy
      cloudsql-proxy:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'

  # --- Celery Beat ---
  celery-beat:
    image: ${ARTIFACT_REGISTRY_URL}/${IMAGE_NAME_WEB}:latest
    container_name: opie-celery-beat
    restart: unless-stopped
    command: celery -A bh_opie beat -l INFO
    stop_grace_period: 30s
    stop_signal: SIGTERM
    volumes:
      - celery_beat_data:/code/celerybeat-schedule
    environment:
      # Use VM's default service account (Google-blessed approach)
      - GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
      - FORCE_GCP_DETECTION=${FORCE_GCP_DETECTION}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC}
      - SKIP_DATA_LOADING=${SKIP_DATA_LOADING}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/bh_opie
      - DJANGO_SETTINGS_MODULE=bh_opie.settings_production
      # GCS configuration comes from GCP Secret Manager at runtime
    dns:
      - 169.254.169.254
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "metadata.google.internal:169.254.169.254"
    depends_on:
      redis:
        condition: service_healthy
      cloudsql-proxy:
        condition: service_healthy
    networks:
      - app-network

  # --- Celery Heavy Worker ---
  celery-worker-heavy:
    image: ${ARTIFACT_REGISTRY_URL}/${IMAGE_NAME_WEB}:latest
    container_name: opie-celery-worker-heavy
    restart: unless-stopped
    command: celery -A bh_opie worker -l INFO --concurrency=1 --pool=prefork --queues=heavy
    stop_grace_period: 30s
    stop_signal: SIGTERM
    environment:
      # Use VM's default service account (Google-blessed approach)
      - GOOGLE_CLOUD_PROJECT=${PROJECT_ID}
      - FORCE_GCP_DETECTION=${FORCE_GCP_DETECTION}
      - SKIP_COLLECTSTATIC=${SKIP_COLLECTSTATIC}
      - SKIP_DATA_LOADING=${SKIP_DATA_LOADING}
      - DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/bh_opie
      - DJANGO_SETTINGS_MODULE=bh_opie.settings_production
      # GCS configuration comes from GCP Secret Manager at runtime
    dns:
      - 169.254.169.254
      - 8.8.8.8
      - 8.8.4.4
    extra_hosts:
      - "metadata.google.internal:169.254.169.254"
    depends_on:
      redis:
        condition: service_healthy
      cloudsql-proxy:
        condition: service_healthy
    networks:
      - app-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'

  # --- y-provider ---
  y-provider:
    image: ${ARTIFACT_REGISTRY_URL}/${IMAGE_NAME_Y_PROVIDER}:latest
    container_name: y-provider
    restart: unless-stopped
    environment:
      - COLLABORATION_API_URL=http://localhost:4444/collaboration/api/
      - COLLABORATION_BACKEND_BASE_URL=${COLLABORATION_BACKEND_BASE_URL:-http://localhost:8000}
      - COLLABORATION_SERVER_ORIGIN=${COLLABORATION_SERVER_ORIGIN:-http://localhost:3000}
      - COLLABORATION_SERVER_SECRET=${COLLABORATION_SERVER_SECRET:-my-secret}
      - COLLABORATION_WS_URL=ws://localhost:4444/collaboration/ws/
      - Y_PROVIDER_API_KEY=${Y_PROVIDER_API_KEY:-my-secret}
      - PORT=4444
      - COLLABORATION_LOGGING=${COLLABORATION_LOGGING:-true}
    ports:
      - "4444:4444"
    user: "${DOCKER_USER:-1000:1000}"
    stop_grace_period: 30s
    stop_signal: SIGTERM
    depends_on:
      - web
      - redis
    networks:
      - app-network

  # --- Flower (Celery monitoring) ---
  flower:
    image: mher/flower:0.9.7
    container_name: opie-flower
    restart: unless-stopped
    command: flower --broker=redis://redis:6379/0 --port=5555
    ports:
      - "5555:5555"
    stop_grace_period: 30s
    stop_signal: SIGTERM
    depends_on:
      - redis
    networks:
      - app-network

  # --- Nango Server ---
  nango-server:
    image: nangohq/nango-server:hosted
    container_name: nango-server
    restart: unless-stopped
    platform: linux/amd64
    environment:
      - NANGO_ENCRYPTION_KEY=${NANGO_ENCRYPTION_KEY}
      - NANGO_DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/nango
      - RECORDS_DATABASE_URL=postgresql://${DB_USER}:${DB_PASS}@cloudsql-proxy:5432/nango
      - NANGO_DB_HOST=cloudsql-proxy
      - NANGO_DB_USER=${DB_USER}
      - NANGO_DB_PASSWORD=${DB_PASS}
      - NANGO_DB_NAME=nango
      - NANGO_DB_SSL=${NANGO_DB_SSL:-false}
      - NANGO_DB_ADDITIONAL_SCHEMAS=${NANGO_DB_ADDITIONAL_SCHEMAS:-}
      - NANGO_DB_POOL_MIN=${NANGO_DB_POOL_MIN:-1}
      - NANGO_DB_POOL_MAX=${NANGO_DB_POOL_MAX:-10}
      - NANGO_REDIS_URL=redis://nango-redis:6380
      - NANGO_REDIS_HOST=nango-redis
      - NANGO_REDIS_PORT=6380
      - SERVER_URL=${NANGO_PUBLIC_SERVER_URL:-https://nango.opie.sh}
      - SERVER_PORT=3003
      - CONNECT_UI_PORT=3009
      - CSP_REPORT_ONLY=true
      - NANGO_SERVER_URL=${NANGO_SERVER_URL:-https://nango.opie.sh}
      - NANGO_PUBLIC_SERVER_URL=${NANGO_PUBLIC_SERVER_URL:-https://nango.opie.sh}
      - NANGO_HOSTPORT=${NANGO_HOSTPORT:-https://nango.opie.sh}
      - FLAG_AUTH_ENABLED=${FLAG_AUTH_ENABLED:-true}
      - NANGO_DASHBOARD_USERNAME=${NANGO_DASHBOARD_USERNAME}
      - NANGO_DASHBOARD_PASSWORD=${NANGO_DASHBOARD_PASSWORD}
      - NANGO_DASHBOARD_EMAIL=${NANGO_DASHBOARD_EMAIL}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - NANGO_SERVER_WEBSOCKETS_PATH=${NANGO_SERVER_WEBSOCKETS_PATH:-/ws}
      - NANGO_LOGS_ENABLED=${NANGO_LOGS_ENABLED:-false}
      - NANGO_LOGS_ES_URL=${NANGO_LOGS_ES_URL:-http://nango-elasticsearch:9200}
      - NANGO_LOGS_ES_USER=${NANGO_LOGS_ES_USER:-}
      - NANGO_LOGS_ES_PWD=${NANGO_LOGS_ES_PWD:-}
      - FLAG_SERVE_CONNECT_UI=true
      - CORS_ORIGINS=${CORS_ORIGINS:-https://app.opie.sh,https://*.opie.sh}
      - NANGO_PUBLIC_CONNECT_URL=${NANGO_PUBLIC_CONNECT_URL:-https://connect.opie.sh}
      - NANGO_CONNECT_UI_PORT=3009
      - NANGO_TELEMETRY_SDK=false
      - TELEMETRY=false
      - NODE_ENV=production
      - COOKIE_SAME_SITE=none
      - COOKIE_SECURE=true
      - TRUST_PROXY=true
      - TZ=UTC
      - SERVER_RUN_MODE=DOCKERIZED
      - NANGO_SERVER_RUN_MODE=DOCKERIZED
      - NANGO_SERVER_CSP_FRAME_ANCESTORS=${NANGO_SERVER_CSP_FRAME_ANCESTORS:-'self' https://app.opie.sh https://*.opie.sh}
      - NANGO_SERVER_X_FRAME_OPTIONS=${NANGO_SERVER_X_FRAME_OPTIONS:-SAMEORIGIN}
    ports:
      - "3003:3003"
      - "3009:3009"
    depends_on:
      cloudsql-proxy:
        condition: service_healthy
      nango-redis:
        condition: service_healthy
    networks:
      - app-network

  # --- Nango Redis ---
  nango-redis:
    image: redis:7.2.4
    container_name: nango-redis
    restart: unless-stopped
    command: ["redis-server", "--port", "6380", "--appendonly", "yes"]
    ports:
      - "6380:6380"
    volumes:
      - nango_redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-p", "6380", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
    networks:
      - app-network

# Define network untuk semua services
networks:
  app-network:
    driver: bridge

volumes:
  redis_data:
  celery_beat_data:
  nango_redis_data:
