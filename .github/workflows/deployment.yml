name: Deploy to GCP VM

on:
  push:
    branches: [main, dev]

env:
  PROJECT_ID: bh-opie
  REGION: australia-southeast1
  IMAGE_NAME_WEB: opie-web
  IMAGE_NAME_Y_PROVIDER: opie-y-provider
  ARTIFACT_REGISTRY_URL: australia-southeast1-docker.pkg.dev/bh-opie/containers

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions runner (Ubuntu)
    environment: bh-opie    # Deploying TO Debian VM
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation

    steps:
    - name: Debug Environment and Secrets
      run: |
        echo "=== Environment Debug ==="
        echo "GitHub Environment: ${{ github.environment }}"
        echo "Repository: ${{ github.repository }}"
        echo "Ref: ${{ github.ref }}"
        echo ""
        echo "=== VM Secrets Debug ==="
        echo "VM_HOST: '${{ secrets.VM_HOST }}'"
        echo "VM_USER: '${{ secrets.VM_USER }}'"
        echo "VM_SSH_KEY length: ${#VM_SSH_KEY}"
        echo ""
        echo "=== Environment Secrets Debug ==="
        echo "Environment: ${{ github.environment }}"
        echo "VM_HOST from env: '${{ env.VM_HOST }}'"
        echo "VM_USER from env: '${{ env.VM_USER }}'"
        echo ""
        echo "=== All Environment Variables ==="
        env | grep -E "^(VM_|GCP_|SECRET_|DATABASE_)" | sort || echo "No matching secrets found"
        echo ""
        echo "=== Test Secret Access ==="
        if [ -n "${{ secrets.VM_HOST }}" ]; then
          echo "✅ VM_HOST is accessible: '${{ secrets.VM_HOST }}'"
        else
          echo "❌ VM_HOST is empty or not accessible"
        fi

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: GCP Authentication
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/204023632747/locations/global/workloadIdentityPools/github-actions-pool/providers/github'
        service_account: 'terraform-deployer@bh-opie.iam.gserviceaccount.com'

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

    - name: Setup Docker Buildx
      run: |
        docker buildx create --use --name multiarch
        docker buildx inspect --bootstrap

    - name: Build and Push Docker image (web)
      run: |
        IMAGE_WEB=australia-southeast1-docker.pkg.dev/${{ env.PROJECT_ID }}/containers/${{ env.IMAGE_NAME_WEB }}:latest
        # Note: Using Workload Identity Federation, no service account key needed
        GCP_CREDS_B64=$(echo "${{ secrets.GCP_SA_KEY }}" | base64 -w 0)
        docker buildx build --no-cache \
          -f Dockerfile.web \
          --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --build-arg DEBUG=0 \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg DJANGO_API_KEY="${{ secrets.DJANGO_API_KEY }}" \
          --build-arg FORCE_GCP_DETECTION="${{ vars.FORCE_GCP_DETECTION }}" \
          --build-arg GOOGLE_APPLICATION_CREDENTIALS_JSON_B64="$GCP_CREDS_B64" \
          -t $IMAGE_WEB \
          --push \
          .

    - name: Build and Push Docker image (y-provider)
      run: |
        cd opie-y-provider
        IMAGE_Y_PROVIDER=australia-southeast1-docker.pkg.dev/${{ env.PROJECT_ID }}/containers/${{ env.IMAGE_NAME_Y_PROVIDER }}:latest
        docker buildx build --no-cache -f Dockerfile -t $IMAGE_Y_PROVIDER --push .
        cd ..

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        
        # Wait for VM to be ready (startup script completion)
        echo "Waiting for VM to complete startup..."
        for i in {1..30}; do
          echo "Attempt $i/30: Testing SSH connection..."
          if timeout 10 ssh -o "StrictHostKeyChecking=no" -o "ConnectTimeout=5" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" "echo 'VM is ready'" 2>/dev/null; then
            echo "✅ VM is ready for deployment!"
            break
          else
            echo "⏳ VM not ready yet, waiting 30 seconds..."
            sleep 30
          fi
        done
        
        # Add VM to known_hosts
        echo "Adding VM to known_hosts..."
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Setup VM for deployment
      run: |
        # Note: VM setup is handled by Terraform startup script
        # The github-actions user and directories are created automatically
        # No service account keys needed with Workload Identity Federation


    - name: Create deployment environment file
      run: |
        echo "PROJECT_ID=${{ env.PROJECT_ID }}" > deployment.env
        echo "IMAGE_NAME_WEB=${{ env.IMAGE_NAME_WEB }}" >> deployment.env
        echo "IMAGE_NAME_Y_PROVIDER=${{ env.IMAGE_NAME_Y_PROVIDER }}" >> deployment.env
        echo "ARTIFACT_REGISTRY_URL=${{ env.ARTIFACT_REGISTRY_URL }}" >> deployment.env

    - name: Upload deployment environment file
      run: scp -o "StrictHostKeyChecking=no" deployment.env "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/deployment.env"

    - name: Upload docker-compose.prod.yml to VM
      run: scp -o "StrictHostKeyChecking=no" docker-compose.prod.yml "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/docker-compose.prod.yml"

    - name: Upload Cloud SQL proxy scripts to VM
      run: |
        # Upload our Cloud SQL proxy scripts
        scp -o "StrictHostKeyChecking=no" scripts/start-cloudsql-proxy-production.sh "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/start-cloudsql-proxy-production.sh"
        scp -o "StrictHostKeyChecking=no" scripts/install-cloudsql-proxy-service.sh "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/install-cloudsql-proxy-service.sh"
        
        # Make scripts executable
        ssh -o "StrictHostKeyChecking=no" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" "chmod +x /home/github-actions/start-cloudsql-proxy-production.sh /home/github-actions/install-cloudsql-proxy-service.sh"

    - name: SSH and deploy full stack
      run: |
        ssh -o "StrictHostKeyChecking=no" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" "
          # Ensure directory exists
          mkdir -p /home/github-actions
          
          # Load all configuration from GCP Secret Manager
          echo 'Loading configuration from GCP Secret Manager...'
          
          # Load main application secrets
          gcloud secrets versions access latest --secret='bh-opie-backend' --project='${{ env.PROJECT_ID }}' > /home/github-actions/.env.production
          
          # Load additional secrets and append
          gcloud secrets versions access latest --secret='llamaindex-ingester-env' --project='${{ env.PROJECT_ID }}' >> /home/github-actions/.env.production
          
          # Add static configuration
          echo 'DEBUG=0' >> /home/github-actions/.env.production
          echo 'GCP_PROJECT=${{ env.PROJECT_ID }}' >> /home/github-actions/.env.production
          echo 'STATIC_BUCKET=bh-opie-static' >> /home/github-actions/.env.production
          echo 'MEDIA_BUCKET=bh-opie-media' >> /home/github-actions/.env.production
          echo 'DOCS_BUCKET=bh-opie-docs' >> /home/github-actions/.env.production
          echo 'GCS_PREFIX=opie-data/global/library/' >> /home/github-actions/.env.production
          echo 'PGVECTOR_SCHEMA=ai' >> /home/github-actions/.env.production
          echo 'PGVECTOR_TABLE=kb__vector_table' >> /home/github-actions/.env.production
          echo 'VAULT_PGVECTOR_TABLE=vault_vector_table' >> /home/github-actions/.env.production
          echo 'DJANGO_API_URL=https://api.opie.sh' >> /home/github-actions/.env.production
          echo 'LOCAL_DEVELOPMENT=false' >> /home/github-actions/.env.production
          cd /home/github-actions
          export \$(cat deployment.env | xargs)
          export FORCE_GCP_DETECTION=${{ vars.FORCE_GCP_DETECTION }}
          export SKIP_COLLECTSTATIC=${{ vars.SKIP_COLLECTSTATIC }}
          export SKIP_DATA_LOADING=${{ vars.SKIP_DATA_LOADING }}
          
          # Setup Cloud SQL proxy for database access
          echo 'Setting up Cloud SQL proxy...'
          ./install-cloudsql-proxy-service.sh --install || echo 'Cloud SQL proxy service already installed'
          
          # Start Cloud SQL proxy
          echo 'Starting Cloud SQL proxy...'
          ./start-cloudsql-proxy-production.sh --start-iam &
          sleep 10
          
          # Wait for database to be ready
          echo 'Waiting for database connection...'
          timeout 60 bash -c 'until ./start-cloudsql-proxy-production.sh --test; do sleep 2; done' || echo 'Database connection timeout'
          
          # Run database migrations
          echo 'Running database migrations...'
          sudo docker run --rm --network host \
            -e DJANGO_SETTINGS_MODULE=bh_opie.settings.Production \
            -e DATABASE_URL=\"${{ secrets.DATABASE_URL }}\" \
            ${{ env.ARTIFACT_REGISTRY_URL }}/${{ env.IMAGE_NAME_WEB }}:latest \
            python manage.py migrate
          
          # Deploy application stack
          echo 'Deploying application stack...'
          sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
          sudo docker system prune -af
          sudo -E docker-compose -f docker-compose.prod.yml pull || true
          sudo -E docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          sudo docker image prune -f || true
          
          # Verify deployment
          echo 'Verifying deployment...'
          sleep 30
          curl -f http://localhost:8000/health/ || echo 'Health check failed'
        "