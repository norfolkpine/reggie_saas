name: Deploy to GCP VM

on:
  push:
    branches: [bh-reggie-test-deploument]

env:
  PROJECT_ID: bh-reggie-test
  REGION: us-central1
  IMAGE_NAME: bh-reggie

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker --quiet

    - name: Build and Push Docker image
      run: |
        IMAGE=gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME }}:latest
        docker build --no-cache -f Dockerfile.web -t $IMAGE .
        docker push $IMAGE

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

    - name: Write GCP key file
      run: echo "${{ secrets.GCP_SA_KEY }}" > key.json

    - name: Upload key.json to VM
      run: scp -o "StrictHostKeyChecking=no" key.json "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/github-actions/key.json"

    - name: Upload .env file (temp)
      run: |
        echo "${{ secrets.ENV_FILE_CONTENTS }}" > env-file
        scp -o "StrictHostKeyChecking=no" env-file "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/github-actions/env-temp"

    - name: SSH and deploy full stack
      run: |
        ssh -o "StrictHostKeyChecking=no" "${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}" '
          gcloud auth activate-service-account --key-file=/home/github-actions/key.json
          gcloud auth configure-docker gcr.io --quiet

          cd /home/github-actions

          # Pull latest images
          sudo docker compose -f docker-compose.prod.yml pull || true

          # Start/Update the stack
          sudo docker compose -f docker-compose.prod.yml up -d --remove-orphans

          # Optional: cleanup old images
          sudo docker image prune -f || true
        '