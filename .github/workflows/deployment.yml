name: Deploy to GCP VM

on:
  push:
    branches: [main, dev]

env:
  PROJECT_ID: bh-opie
  REGION: australia-southeast1
  IMAGE_NAME_WEB: opie-web
  IMAGE_NAME_Y_PROVIDER: opie-y-provider
  ARTIFACT_REGISTRY_URL: australia-southeast1-docker.pkg.dev/bh-opie/containers
  IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: bh-opie
    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
    - name: Debug Environment and Secrets
      run: |
        echo "::add-mask::${{ secrets.VM_HOST }}"
        echo "::add-mask::${{ secrets.VM_USER }}"
        echo "::add-mask::${{ secrets.VM_SSH_KEY }}"
        echo "::add-mask::${{ secrets.DB_PASS }}"
        echo "::add-mask::${{ secrets.DB_USER }}"
        echo "::add-mask::${{ secrets.NANGO_ENCRYPTION_KEY }}"
        echo "::add-mask::${{ secrets.NANGO_DASHBOARD_USERNAME }}"
        echo "::add-mask::${{ secrets.NANGO_DASHBOARD_PASSWORD }}"
        echo "::add-mask::${{ secrets.NANGO_DASHBOARD_EMAIL }}"
        echo "::add-mask::${{ secrets.NANGO_LOGS_ES_USER }}"
        echo "::add-mask::${{ secrets.NANGO_LOGS_ES_PWD }}"
        echo "::add-mask::${{ secrets.COLLABORATION_SERVER_SECRET }}"
        echo "::add-mask::${{ secrets.Y_PROVIDER_API_KEY }}"
        echo "::add-mask::${{ secrets.GCS_STORAGE_SA_KEY_BASE64 }}"
        echo "::add-mask::${{ secrets.SECRET_KEY }}"
        echo "::add-mask::${{ secrets.DATABASE_URL }}"
        echo "::add-mask::${{ secrets.SYSTEM_API_KEY }}"
        echo "Repo: ${{ github.repository }} | Ref: ${{ github.ref }} | IMAGE_TAG: ${{ env.IMAGE_TAG }}"

    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: GCP Authentication
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: 'projects/204023632747/locations/global/workloadIdentityPools/github-actions-pool/providers/github'
        service_account: 'terraform-deployer@bh-opie.iam.gserviceaccount.com'

    - name: Setup gcloud CLI
      uses: google-github-actions/setup-gcloud@v2

    - name: Check VM Status and Startup Script Logs
      run: |
        gcloud auth list --filter=status:ACTIVE --format="value(account)" || true
        VM_STATUS=$(gcloud compute instances describe opie-stack-vm --zone=australia-southeast1-a --project=${{ env.PROJECT_ID }} --format="value(status)" 2>/dev/null || echo "VM_NOT_FOUND")
        echo "VM Status: $VM_STATUS"
        gcloud compute instances get-serial-port-output opie-stack-vm --zone=australia-southeast1-a --project=${{ env.PROJECT_ID }} --start=0 2>/dev/null | tail -100 || true

    - name: Configure Docker for Artifact Registry
      run: gcloud auth configure-docker australia-southeast1-docker.pkg.dev --quiet

    - name: Setup Docker Buildx
      run: |
        docker buildx create --use --name multiarch
        docker buildx inspect --bootstrap

    - name: Build and Push Docker image (web)
      run: |
        set -euo pipefail
        IMAGE_BASE=australia-southeast1-docker.pkg.dev/${{ env.PROJECT_ID }}/containers/${{ env.IMAGE_NAME_WEB }}
        IMAGE_WEB_SHA=${IMAGE_BASE}:${{ env.IMAGE_TAG }}
        IMAGE_WEB_LATEST=${IMAGE_BASE}:latest
        docker buildx build --no-cache \
          -f Dockerfile.web \
          --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --build-arg DEBUG=0 \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          --build-arg SYSTEM_API_KEY="${{ secrets.SYSTEM_API_KEY }}" \
          --build-arg FORCE_GCP_DETECTION="${{ vars.FORCE_GCP_DETECTION }}" \
          -t "$IMAGE_WEB_SHA" -t "$IMAGE_WEB_LATEST" \
          --push .

    - name: Build and Push Docker image (y-provider)
      run: |
        set -euo pipefail
        cd opie-y-provider
        IMAGE_BASE=australia-southeast1-docker.pkg.dev/${{ env.PROJECT_ID }}/containers/${{ env.IMAGE_NAME_Y_PROVIDER }}
        IMAGE_SHA=${IMAGE_BASE}:${{ env.IMAGE_TAG }}
        IMAGE_LATEST=${IMAGE_BASE}:latest
        docker buildx build --no-cache -f Dockerfile -t "$IMAGE_SHA" -t "$IMAGE_LATEST" --push .
        cd ..

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts || true

    - name: Create deployment environment file on VM
      run: |
        ssh -o "StrictHostKeyChecking=no" "github-actions@${{ secrets.VM_HOST }}" "
          {
            echo 'PROJECT_ID=${{ env.PROJECT_ID }}'
            echo 'IMAGE_NAME_WEB=${{ env.IMAGE_NAME_WEB }}'
            echo 'IMAGE_NAME_Y_PROVIDER=${{ env.IMAGE_NAME_Y_PROVIDER }}'
            echo 'ARTIFACT_REGISTRY_URL=${{ env.ARTIFACT_REGISTRY_URL }}'
            echo 'IMAGE_TAG=${{ env.IMAGE_TAG }}'
            echo 'DB_PASS=${{ secrets.DB_PASS }}'
            echo 'DB_USER=${{ secrets.DB_USER }}'
            echo 'DB_NAME=bh_opie'
            echo 'NANGO_ENCRYPTION_KEY=${{ secrets.NANGO_ENCRYPTION_KEY }}'
            echo 'NANGO_PUBLIC_URL=${{ vars.NANGO_PUBLIC_URL }}'
            echo 'NANGO_SERVER_URL=${{ vars.NANGO_SERVER_URL }}'
            echo 'NANGO_PUBLIC_SERVER_URL=${{ vars.NANGO_PUBLIC_SERVER_URL }}'
            echo 'NANGO_PUBLIC_CONNECT_URL=${{ vars.NANGO_PUBLIC_CONNECT_URL }}'
            echo 'NANGO_HOSTPORT=${{ vars.NANGO_HOSTPORT }}'
            echo 'NANGO_SERVER_WEBSOCKETS_PATH=${{ vars.NANGO_SERVER_WEBSOCKETS_PATH }}'
            echo 'NANGO_LOGS_ENABLED=${{ vars.NANGO_LOGS_ENABLED }}'
            echo 'NANGO_LOGS_ES_URL=${{ vars.NANGO_LOGS_ES_URL }}'
            echo 'NANGO_DASHBOARD_USERNAME=${{ secrets.NANGO_DASHBOARD_USERNAME }}'
            echo 'NANGO_DASHBOARD_PASSWORD=${{ secrets.NANGO_DASHBOARD_PASSWORD }}'
            echo 'NANGO_DASHBOARD_EMAIL=${{ secrets.NANGO_DASHBOARD_EMAIL }}'
            echo 'CORS_ORIGINS=${{ vars.CORS_ORIGINS }}'
            echo 'NANGO_DB_SSL=${{ vars.NANGO_DB_SSL }}'
            echo 'NANGO_DB_ADDITIONAL_SCHEMAS=${{ vars.NANGO_DB_ADDITIONAL_SCHEMAS }}'
            echo 'NANGO_DB_POOL_MIN=${{ vars.NANGO_DB_POOL_MIN }}'
            echo 'NANGO_DB_POOL_MAX=${{ vars.NANGO_DB_POOL_MAX }}'
            echo 'NANGO_LOGS_ES_USER=${{ secrets.NANGO_LOGS_ES_USER }}'
            echo 'NANGO_LOGS_ES_PWD=${{ secrets.NANGO_LOGS_ES_PWD }}'
            echo 'COLLABORATION_SERVER_SECRET=${{ secrets.COLLABORATION_SERVER_SECRET }}'
            echo 'Y_PROVIDER_API_KEY=${{ secrets.Y_PROVIDER_API_KEY }}'
            echo 'COLLABORATION_BACKEND_BASE_URL=${{ vars.COLLABORATION_BACKEND_BASE_URL }}'
            echo 'COLLABORATION_SERVER_ORIGIN=${{ vars.COLLABORATION_SERVER_ORIGIN }}'
            echo 'COLLABORATION_LOGGING=${{ vars.COLLABORATION_LOGGING }}'
            echo 'FLAG_AUTH_ENABLED=${{ vars.FLAG_AUTH_ENABLED }}'
            echo 'GCS_STORAGE_SA_KEY_BASE64=${{ secrets.GCS_STORAGE_SA_KEY_BASE64 }}'
          } > /home/github-actions/deployment.env
          chmod 644 /home/github-actions/deployment.env
        "

    - name: Upload docker-compose.prod.yml to VM
      run: |
        scp -o "StrictHostKeyChecking=no" docker-compose.prod.yml "github-actions@${{ secrets.VM_HOST }}:/home/github-actions/docker-compose.prod.yml"

    - name: Deploy to VM (compose pinned to SHA)
      run: |
        ssh -o "StrictHostKeyChecking=no" "github-actions@${{ secrets.VM_HOST }}" "
          set -euo pipefail
          gcloud config set project ${{ env.PROJECT_ID }} >/dev/null

          ACCESS_TOKEN=\$(curl -H 'Metadata-Flavor: Google' 'http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/token' | jq -r '.access_token')
          AUTH_STRING=\$(echo -n \"oauth2accesstoken:\$ACCESS_TOKEN\" | base64 -w 0)
          sudo mkdir -p /home/github-actions/.docker
          echo \"{\\\"auths\\\":{\\\"australia-southeast1-docker.pkg.dev\\\":{\\\"auth\\\":\\\"\$AUTH_STRING\\\"}}}\" | sudo tee /home/github-actions/.docker/config.json >/dev/null
          sudo chown -R github-actions:github-actions /home/github-actions/.docker
          sudo chmod 600 /home/github-actions/.docker/config.json

          set -a
          source /home/github-actions/deployment.env
          set +a
          export COMPOSE_IMAGE_TAG=\${IMAGE_TAG}
          export NANGO_SERVER_WEBSOCKETS_PATH=\${NANGO_SERVER_WEBSOCKETS_PATH:-/}
          export FLAG_AUTH_ENABLED=\${FLAG_AUTH_ENABLED:-true}

          docker-compose -f /home/github-actions/docker-compose.prod.yml pull
          docker-compose -f /home/github-actions/docker-compose.prod.yml up -d --remove-orphans

          sleep 60
          docker-compose -f /home/github-actions/docker-compose.prod.yml ps
          curl -fsS http://localhost:8000/ >/dev/null && echo 'Web healthy' || (echo 'Web health failed'; docker logs opie-web --tail 100 || true)
        "

    - name: Cleanup Artifact Registry (keep 10 latest digests per image)
      run: |
        set -euo pipefail
        REPO="australia-southeast1-docker.pkg.dev/${{ env.PROJECT_ID }}/containers"
        KEEP=10
        prune_image () {
          local image="$1"
          mapfile -t DIGESTS < <(
            gcloud artifacts docker images list "$REPO/$image" \
              --format='get(digest,timestamp)' \
              --include-tags \
              --sort-by=~timestamp | awk '!seen[$1]++ {print $1}'
          )
          local COUNT=${#DIGESTS[@]}
          if [ "$COUNT" -le "$KEEP" ]; then
            echo "Nothing to prune for $image"
            return 0
          fi
          for d in "${DIGESTS[@]:$KEEP}"; do
            gcloud artifacts docker images delete "$REPO/$image@$d" --quiet --delete-tags || true
          done
        }
        prune_image "${{ env.IMAGE_NAME_WEB }}"
        prune_image "${{ env.IMAGE_NAME_Y_PROVIDER }}"
