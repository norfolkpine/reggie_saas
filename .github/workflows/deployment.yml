name: Deploy to GCP VM

on:
  push:
    branches: [main, dev]

env:
  PROJECT_ID: bh-opie
  REGION: australia-southeast1
  IMAGE_NAME_WEB: opie-web
  IMAGE_NAME_Y_PROVIDER: opie-y-provider

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions runner (Ubuntu)
    environment: bh-opie    # Deploying TO Debian VM

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: GCP Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker --quiet

    - name: Build and Push Docker image (web)
      run: |
        IMAGE_WEB=gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME_WEB }}:latest
        docker build --no-cache -f Dockerfile.web \
          --build-arg SECRET_KEY="${{ secrets.SECRET_KEY }}" \
          --build-arg DEBUG=0 \
          --build-arg DATABASE_URL="${{ secrets.DATABASE_URL }}" \
          -t $IMAGE_WEB .
        docker push $IMAGE_WEB

    - name: Build and Push Docker image (y-provider)
      run: |
        cd opie-y-provider
        IMAGE_Y_PROVIDER=gcr.io/${{ env.PROJECT_ID }}/${{ env.IMAGE_NAME_Y_PROVIDER }}:latest
        docker build --no-cache -f Dockerfile -t $IMAGE_Y_PROVIDER .
        docker push $IMAGE_Y_PROVIDER
        cd ..

    - name: Set up SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

    - name: Upload service account keys to VM
      run: |
        # Ensure .gcp/creds directory exists on VM
        ssh -o "StrictHostKeyChecking=no" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" "mkdir -p /home/github-actions/.gcp/creds"
        
        # Upload GitHub Actions service account key
        scp -o "StrictHostKeyChecking=no" .gcp/creds/bh-opie/github-actions.json "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/key.json"
        
        # Upload storage service account key
        scp -o "StrictHostKeyChecking=no" .gcp/creds/bh-opie/storage.json "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/.gcp/creds/storage.json"

        - name: Create production environment file
          run: |
            cat > .env.production << EOF
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            DEBUG=0
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            GCP_PROJECT=${{ env.PROJECT_ID }}
            STATIC_BUCKET=bh-opie-static
            MEDIA_BUCKET=bh-opie-media
            DOCS_BUCKET=bh-opie-docs
            GCS_PREFIX=opie-data/global/library/
            PGVECTOR_SCHEMA=ai
            PGVECTOR_TABLE=kb__vector_table
            VAULT_PGVECTOR_TABLE=vault_vector_table
            DJANGO_API_URL=https://api.opie.sh
            LOCAL_DEVELOPMENT=false
            EOF

    - name: Upload environment files to VM
      run: |
        # Upload main environment file
        scp -o "StrictHostKeyChecking=no" .env.production "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/.env.production"
        
        # Upload y-provider environment file
        echo "${{ secrets.ENV_FILE_CONTENTS_Y_PROVIDER }}" > env-file-y-provider
        scp -o "StrictHostKeyChecking=no" env-file-y-provider "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/.env.y-provider"

    - name: Create deployment environment file
      run: |
        echo "PROJECT_ID=${{ env.PROJECT_ID }}" > deployment.env
        echo "IMAGE_NAME_WEB=${{ env.IMAGE_NAME_WEB }}" >> deployment.env
        echo "IMAGE_NAME_Y_PROVIDER=${{ env.IMAGE_NAME_Y_PROVIDER }}" >> deployment.env

    - name: Upload deployment environment file
      run: scp -o "StrictHostKeyChecking=no" deployment.env "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/deployment.env"

    - name: Upload docker-compose.prod.yml to VM
      run: scp -o "StrictHostKeyChecking=no" docker-compose.prod.yml "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:/home/github-actions/docker-compose.prod.yml"

    - name: SSH and deploy full stack
      run: |
        ssh -o "StrictHostKeyChecking=no" "${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}" "
          export CLOUDSDK_CONFIG=/tmp/gcloud-config
          mkdir -p \$CLOUDSDK_CONFIG
          chmod 700 \$CLOUDSDK_CONFIG
          gcloud auth activate-service-account --key-file=/home/github-actions/key.json
          gcloud auth configure-docker gcr.io --quiet
          
          # Load additional secrets from GCP Secret Manager
          echo 'Loading additional secrets from GCP Secret Manager...'
          gcloud secrets versions access latest --secret='llamaindex-ingester-env' --project='${{ env.PROJECT_ID }}' > /tmp/additional-secrets.env
          cat /tmp/additional-secrets.env >> /home/github-actions/.env.production
          cd /home/github-actions
          export \$(cat deployment.env | xargs)
          export FORCE_GCP_DETECTION=${{ vars.FORCE_GCP_DETECTION }}
          export SKIP_COLLECTSTATIC=${{ vars.SKIP_COLLECTSTATIC }}
          export SKIP_DATA_LOADING=${{ vars.SKIP_DATA_LOADING }}
          sudo docker-compose -f docker-compose.prod.yml down --remove-orphans
          sudo docker system prune -af
          sudo -E docker-compose -f docker-compose.prod.yml pull || true
          sudo -E docker-compose -f docker-compose.prod.yml up -d --remove-orphans
          sudo docker image prune -f || true
        "