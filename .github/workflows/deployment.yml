name: Deploy to GCP VM

on:
  push:
    branches: [main, dev]

env:
  PROJECT_ID: bh-opie
  REGION: australia-southeast1
  IMAGE_NAME_WEB: opie-web
  IMAGE_NAME_Y_PROVIDER: opie-y-provider
  ARTIFACT_REGISTRY_URL: australia-southeast1-docker.pkg.dev/bh-opie/containers

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions runner (Ubuntu)
    environment: bh-opie    # Deploying TO Debian VM
    permissions:
      contents: read
      id-token: write  # Required for Workload Identity Federation

    steps:
    - name: Stop Existing Containers
      run: |
        echo "=== Stopping Existing Containers ==="
        CONTAINERS="opie-web opie-celery-worker opie-celery-beat opie-celery-worker-heavy opie-flower y-provider github-actions-redis-1"
        for CONTAINER in $CONTAINERS; do
          if [ $(docker ps -q -f name=$CONTAINER) ]; then
            echo "Stopping container: $CONTAINER"
            for i in {1..3}; do
              docker stop $CONTAINER && break || echo "Retrying stop for $CONTAINER ($i/3)"
              sleep 5
            done
            docker rm $CONTAINER || echo "Failed to remove container: $CONTAINER"
          else
            echo "Container $CONTAINER is not running."
          fi
        done

    - name: Check and Release Ports
      run: |
        echo "=== Checking and Releasing Ports ==="
        PORTS="5432 6379 8000"
        for PORT in $PORTS; do
          if lsof -ti:$PORT >/dev/null 2>&1; then
            echo "Port $PORT is in use, attempting to release..."
            PIDS=$(lsof -ti:$PORT)
            echo "Killing processes using port $PORT: $PIDS"
            echo "$PIDS" | xargs -r sudo kill -9
            sleep 2
          else
            echo "Port $PORT is free."
          fi
        done

    - name: Final Port Check
      run: |
        echo "=== Final Port Availability Check ==="
        for PORT in $PORTS; do
          for i in {1..30}; do
            if ! lsof -ti:$PORT >/dev/null 2>&1; then
              echo "Port $PORT is free"
              break
            fi
            echo "Waiting for port $PORT to be released... ($i/30)"
              sleep 1
            done
          done
          
    - name: Environment Setup
      run: |
        echo "=== Environment Setup ==="
        # Debug Environment and Secrets
        echo "Verifying environment variables and secrets..."
        # Checkout Code
        echo "Checking out code..."
        actions/checkout@v3

    - name: Authentication and Configuration
      run: |
        echo "=== Authentication and Configuration ==="
        # GCP Authentication
        echo "Authenticating with Google Cloud..."
        # Configure Docker for Artifact Registry
        echo "Configuring Docker for Artifact Registry..."

    - name: Docker Build and Push
      run: |
        echo "=== Docker Build and Push ==="
        # Setup Docker Buildx
        echo "Setting up Docker Buildx..."
        # Build and Push Docker Images
        echo "Building and pushing Docker images..."

    - name: SSH and VM Preparation
      run: |
        echo "=== SSH and VM Preparation ==="
        # Set up SSH
        echo "Setting up SSH..."
        # Setup VM for Deployment
        echo "Preparing VM for deployment..."

    - name: Deployment Environment
      run: |
        echo "=== Deployment Environment ==="
        # Create Deployment Environment File
        echo "Creating deployment environment file..."

    - name: File Uploads
      run: |
        echo "=== File Uploads ==="
        # Upload docker-compose.prod.yml
        echo "Uploading docker-compose.prod.yml..."
        # Upload Cloud SQL Proxy Scripts
        echo "Uploading Cloud SQL proxy scripts..."

    - name: Full Stack Deployment
      run: |
        echo "=== Full Stack Deployment ==="
        # SSH and Deploy Full Stack
        echo "Deploying full stack..."

    - name: Build and Deploy Containers
      run: |
        echo "=== Building and Deploying Containers ==="
        # Build and push Docker images for the web and y-provider components
        echo "Building Docker images..."
        # Add build and push commands here
        echo "Deploying containers..."
        # Add deployment commands here

    - name: Remove Health Checks
      run: |
        echo "=== Removing Health Checks ==="
        # Remove any steps related to health checks and verification
        echo "Health checks removed from CI/CD pipeline."

    - name: Start Redis Service
      run: |
        echo "=== Starting Redis Service ==="
          sudo docker run -d --name redis --network host \
            redis:latest redis-server --appendonly yes
        echo "✅ Redis service started successfully"

    - name: Start Celery Services
      run: |
        echo "=== Starting Celery Services ==="
          # Start Celery worker
          sudo docker run -d --name opie-celery-worker --network host \
            -e GOOGLE_APPLICATION_CREDENTIALS=/code/.gcp/creds/storage.json \
            -e GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }} \
            -e FORCE_GCP_DETECTION=${{ vars.FORCE_GCP_DETECTION }} \
            -e SKIP_COLLECTSTATIC=${{ vars.SKIP_COLLECTSTATIC }} \
            -e SKIP_DATA_LOADING=${{ vars.SKIP_DATA_LOADING }} \
            -e DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@localhost:5432/bh_opie" \
            -v /home/github-actions/.gcp/creds/storage.json:/code/.gcp/creds/storage.json:ro \
            ${{ env.ARTIFACT_REGISTRY_URL }}/${{ env.IMAGE_NAME_WEB }}:latest \
            celery -A bh_opie worker -l INFO --concurrency=2 --pool=prefork
        echo "✅ Celery worker started successfully"
          
          # Start Celery beat
          sudo docker run -d --name opie-celery-beat --network host \
            -e GOOGLE_APPLICATION_CREDENTIALS=/code/.gcp/creds/storage.json \
            -e GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }} \
            -e FORCE_GCP_DETECTION=${{ vars.FORCE_GCP_DETECTION }} \
            -e SKIP_COLLECTSTATIC=${{ vars.SKIP_COLLECTSTATIC }} \
            -e SKIP_DATA_LOADING=${{ vars.SKIP_DATA_LOADING }} \
            -e DATABASE_URL="postgresql://${{ secrets.DB_USER }}:${{ secrets.DB_PASS }}@localhost:5432/bh_opie" \
            -v /home/github-actions/.gcp/creds/storage.json:/code/.gcp/creds/storage.json:ro \
            ${{ env.ARTIFACT_REGISTRY_URL }}/${{ env.IMAGE_NAME_WEB }}:latest \
            celery -A bh_opie beat -l INFO
        echo "✅ Celery beat started successfully"