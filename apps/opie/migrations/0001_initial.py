# Generated by Django 5.2.6 on 2025-10-03 15:52

import apps.opie.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('djstripe', '0014_2_9a'),
        ('teams', '0002_team_billing_details_last_changed_team_customer_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Capability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Capabilities',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='FileTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('google', 'Google'), ('anthropic', 'Anthropic'), ('groq', 'Groq')], help_text='LLM provider (e.g., OpenAI, Google, Anthropic, Groq).', max_length=20)),
                ('model_name', models.CharField(help_text='Model identifier (e.g., gpt-4o, gemini-pro, claude-3).', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the model, its strengths, or use case (e.g., best for summarization).', null=True)),
                ('embedder_id', models.CharField(blank=True, help_text="ID of the embedder model (e.g., 'text-embedding-ada-002', 'text-embedding-004')", max_length=100, null=True)),
                ('embedder_dimensions', models.IntegerField(blank=True, help_text='Vector size of the embedder (e.g., 1536, 768)', null=True)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this model is available for use.')),
                ('input_cost_per_1M', models.FloatField(default=0.0, help_text='input_cost_per_1M')),
                ('output_cost_per_1M', models.FloatField(default=0.0, help_text='output_cost_per_1M')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('tool_identifier', models.CharField(help_text="Used in code to identify the tool (e.g., 'github')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('required_fields', models.JSONField(default=dict, help_text='Expected fields to initialize the tool')),
                ('is_enabled', models.BooleanField(default=True, help_text='Controls availability for all users')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('agent_id', models.CharField(blank=True, editable=False, help_text='Unique identifier for the agent, used for session storage.', max_length=64)),
                ('unique_code', models.UUIDField(default=apps.opie.models.generate_full_uuid, editable=False, help_text='Unique identifier for the agent, used for session storage.', unique=True)),
                ('memory_table', models.CharField(blank=True, editable=False, help_text='Table name for memory persistence, unique to this agent.', max_length=255, unique=True)),
                ('session_table', models.CharField(blank=True, editable=False, help_text='Table name for session persistence, derived from unique_code.', max_length=255, unique=True)),
                ('agent_knowledge_id', models.CharField(blank=True, editable=False, help_text='Table name for knowledge base persistence, derived from unique_code.', max_length=255, null=True, unique=True)),
                ('search_knowledge', models.BooleanField(default=True)),
                ('cite_knowledge', models.BooleanField(default=True)),
                ('read_chat_history', models.BooleanField(default=True)),
                ('add_datetime_to_instructions', models.BooleanField(default=True)),
                ('show_tool_calls', models.BooleanField(default=False)),
                ('read_tool_call_history', models.BooleanField(default=True)),
                ('markdown_enabled', models.BooleanField(default=True)),
                ('default_reasoning', models.BooleanField(default=False, help_text='Enable chain-of-thought reasoning by default for this agent.')),
                ('debug_mode', models.BooleanField(default=False, help_text='Enable debug mode for logging.')),
                ('num_history_responses', models.IntegerField(default=3, help_text='Number of past responses to keep in chat memory.')),
                ('add_history_to_messages', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('subscriptions', models.ManyToManyField(blank=True, related_name='agents', to='djstripe.subscription')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='teams.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentExpectedOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for this expected output, e.g., 'Basic Research Report'.", max_length=255, null=True)),
                ('expected_output', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Response Handling & Formatting', max_length=50)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='opie.agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='expected_output',
            field=models.ForeignKey(blank=True, help_text='The predefined expected output template assigned to this agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='opie.agentexpectedoutput'),
        ),
        migrations.CreateModel(
            name='AgentInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for the instruction, e.g., 'Default Retrieval Strategy'.", max_length=255, null=True)),
                ('instruction', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Template', max_length=50)),
                ('is_template', models.BooleanField(default=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('is_system', models.BooleanField(default=False, help_text='Flag for platform/system-level instructions.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='instructions',
            field=models.ForeignKey(blank=True, help_text='The predefined instructions assigned to this agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='opie.agentinstruction'),
        ),
        migrations.CreateModel(
            name='AgentUIProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('text_color', models.CharField(blank=True, max_length=255, null=True)),
                ('background_color', models.CharField(blank=True, max_length=255, null=True)),
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ui_properties', to='opie.agent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='capabilities',
            field=models.ManyToManyField(blank=True, related_name='agents', to='opie.capability'),
        ),
        migrations.AddField(
            model_name='agent',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='opie.category'),
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='New Chat', help_text='Title of the chat session', max_length=255)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to='opie.agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Collection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('collection_type', models.CharField(choices=[('folder', 'Folder'), ('regulation', 'Regulation'), ('act', 'Act'), ('guideline', 'Guideline'), ('manual', 'Manual')], default='folder', max_length=50)),
                ('jurisdiction', models.CharField(blank=True, max_length=100, null=True)),
                ('regulation_number', models.CharField(blank=True, max_length=50, null=True)),
                ('effective_date', models.DateField(blank=True, null=True)),
                ('sort_order', models.IntegerField(default=0)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='opie.collection')),
            ],
            options={
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EphemeralFile',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('session_id', models.CharField(db_index=True, max_length=64)),
                ('title', models.CharField(max_length=255)),
                ('file', models.FileField(max_length=512, upload_to=apps.opie.models.chat_file_path)),
                ('name', models.CharField(max_length=255)),
                ('mime_type', models.CharField(max_length=255)),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ephemeral_files', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('filesize', models.BigIntegerField(default=0, help_text='Size of the file in bytes (mirrors file_size, for API compatibility)')),
                ('volume_number', models.IntegerField(blank=True, help_text='Volume number for multi-volume documents', null=True)),
                ('part_number', models.CharField(blank=True, help_text="Part or section number (e.g., 'Part A', 'Section 1')", max_length=20, null=True)),
                ('collection_order', models.IntegerField(default=0, help_text='Order of this file within its collection')),
                ('is_vault', models.BooleanField(default=False, help_text='Is this file a vault file?')),
                ('file', models.FileField(help_text="Upload a file to the user's file library or vault. Supported types: pdf, docx, xlsx, txt, csv, json, md, jpeg, jpg, png, gif", max_length=1024, upload_to=apps.opie.models.choose_upload_path)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('xlsx', 'XLSX'), ('txt', 'TXT'), ('csv', 'CSV'), ('json', 'JSON'), ('md', 'Markdown'), ('jpeg', 'JPEG'), ('jpg', 'JPG'), ('png', 'PNG'), ('gif', 'GIF'), ('other', 'Other')], default='pdf', help_text='Detected type of the uploaded file.', max_length=10)),
                ('storage_path', models.CharField(help_text="Full storage path including bucket (e.g. 'gcs://bucket/path' or 's3://bucket/path')", max_length=1024)),
                ('original_path', models.CharField(blank=True, help_text='Original path/name of the file before upload', max_length=1024, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10)),
                ('is_global', models.BooleanField(default=False, help_text='Global public library files.')),
                ('is_ingested', models.BooleanField(default=False, help_text='Whether the file has been successfully ingested into any knowledge base.')),
                ('auto_ingest', models.BooleanField(default=False, help_text='Whether to automatically ingest this file after upload.')),
                ('total_documents', models.IntegerField(default=0, help_text='Total number of documents extracted from this file')),
                ('page_count', models.IntegerField(default=0, help_text='Number of pages in the document (for PDFs)')),
                ('file_size', models.BigIntegerField(default=0, help_text='Size of the file in bytes')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('collection', models.ForeignKey(blank=True, help_text='Collection this file belongs to.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='opie.collection')),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_files', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='teams.team')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_files', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='files', to='opie.filetag')),
            ],
            options={
                'ordering': ['collection', 'collection_order', 'volume_number', 'part_number', 'title'],
                'permissions': [('can_ingest_files', 'Can ingest files into knowledge base'), ('can_manage_global_files', 'Can manage global files')],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('knowledge_type', models.CharField(choices=[('agno_pgvector', 'Agno PGVector (default)'), ('llamaindex', 'LlamaIndex VectorStore'), ('arxiv', 'ArXiv Papers'), ('combined', 'Combined Knowledge Base'), ('csv', 'CSV Files'), ('document', 'Document Files (DOCX)'), ('json', 'JSON Files'), ('langchain', 'LangChain Retriever'), ('pdf', 'Local PDF Files'), ('pdf_url', 'PDF Files from URLs'), ('s3_pdf', 'PDF Files from S3'), ('s3_text', 'Text Files from S3'), ('text', 'Local Text Files'), ('website', 'Website Data'), ('wikipedia', 'Wikipedia Articles'), ('other', 'Other Knowledge Type')], default='llamaindex', help_text='Defines how this knowledge base is structured (e.g., PDFs, SQL, API, etc.).', max_length=20)),
                ('path', models.CharField(blank=True, help_text='Path for files or storage location (e.g., local dir, URL, S3 bucket).', max_length=500, null=True)),
                ('unique_code', models.UUIDField(default=apps.opie.models.generate_full_uuid, editable=False, help_text='Globally unique identifier for the knowledge base.', unique=True)),
                ('knowledgebase_id', models.CharField(blank=True, editable=False, help_text='Unique slugified identifier used for referencing and table naming.', max_length=64, unique=True)),
                ('vector_table_name', models.CharField(blank=True, editable=False, help_text='Postgres vector table name used for embeddings.', max_length=255)),
                ('chunk_size', models.IntegerField(default=1000, help_text='Size of chunks used for text splitting during ingestion.')),
                ('chunk_overlap', models.IntegerField(default=200, help_text='Number of characters to overlap between chunks.')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the knowledge base was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the knowledge base was last updated.')),
                ('uploaded_by', models.ForeignKey(blank=True, help_text='User who created this knowledge base.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_bases', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FileKnowledgeBaseLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingestion_status', models.CharField(choices=[('not_started', 'Not Started'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='not_started', help_text='Current status of the ingestion process for this file in this knowledge base.', max_length=20)),
                ('ingestion_error', models.TextField(blank=True, help_text='Error message if ingestion failed.', null=True)),
                ('ingestion_started_at', models.DateTimeField(blank=True, help_text='When the ingestion process started.', null=True)),
                ('ingestion_completed_at', models.DateTimeField(blank=True, help_text='When the ingestion process completed.', null=True)),
                ('ingestion_progress', models.FloatField(default=0.0, help_text='Current progress of ingestion (0-100)')),
                ('processed_docs', models.IntegerField(default=0, help_text='Number of documents processed')),
                ('total_docs', models.IntegerField(default=0, help_text='Total number of documents to process')),
                ('embedding_model', models.CharField(blank=True, help_text='Model used for embeddings (e.g. text-embedding-ada-002)', max_length=100, null=True)),
                ('chunk_size', models.IntegerField(default=0, help_text='Size of chunks used for processing')),
                ('chunk_overlap', models.IntegerField(default=0, help_text='Overlap between chunks')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base_links', to='opie.file')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_links', to='opie.knowledgebase')),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='knowledge_bases',
            field=models.ManyToManyField(blank=True, help_text='Knowledge bases this file is linked to for ingestion.', related_name='linked_files', through='opie.FileKnowledgeBaseLink', to='opie.knowledgebase'),
        ),
        migrations.AddField(
            model_name='agent',
            name='knowledge_base',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='opie.knowledgebase'),
        ),
        migrations.CreateModel(
            name='KnowledgeBasePdfURL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('is_enabled', models.BooleanField(default=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('kb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pdf_urls', to='opie.knowledgebase')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='KnowledgeBasePermission',
            fields=[
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('viewer', 'Viewer'), ('editor', 'Editor'), ('owner', 'Owner')], default='viewer', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_kb_team_links', to=settings.AUTH_USER_MODEL)),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='permission_links', to='opie.knowledgebase')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledgebase_permission_links', to='teams.team')),
            ],
            options={
                'verbose_name': 'Knowledge Base Permission',
                'verbose_name_plural': 'Knowledge Base Permissions',
            },
        ),
        migrations.AddField(
            model_name='knowledgebase',
            name='permissions',
            field=models.ManyToManyField(blank=True, help_text='Teams with access to this knowledge base via permissions.', related_name='knowledge_bases', through='opie.KnowledgeBasePermission', to='teams.team'),
        ),
        migrations.AddField(
            model_name='knowledgebase',
            name='model_provider',
            field=models.ForeignKey(help_text='LLM provider to use for embeddings in this knowledge base.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='opie.modelprovider'),
        ),
        migrations.AddField(
            model_name='agent',
            name='model',
            field=models.ForeignKey(blank=True, help_text='AI model used by the agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='opie.modelprovider'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('uuid', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False, unique=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('vault_vector_table', models.CharField(blank=True, help_text='Vector table name for Vault file embeddings', max_length=255, null=True)),
                ('members', models.ManyToManyField(blank=True, help_text='Direct users with access to this project.', related_name='projects', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
                ('shared_with_teams', models.ManyToManyField(blank=True, help_text='Teams with access to this project.', related_name='shared_projects', to='teams.team')),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_projects', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, help_text='Team this project belongs to (optional if personal).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='teams.team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='file',
            name='vault_project',
            field=models.ForeignKey(blank=True, help_text='Vault project for this file (if any)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='file_vault_files', to='opie.project'),
        ),
        migrations.CreateModel(
            name='AiConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('folder_id', models.BigIntegerField(default=0, help_text='Folder ID for folder-level conversations (0 for root)')),
                ('question', models.TextField(help_text="User's question or prompt")),
                ('response', models.TextField(help_text="AI's response")),
                ('context_files', models.JSONField(blank=True, default=list, help_text='List of file IDs used as context for this conversation')),
                ('tokens_used', models.IntegerField(default=0, help_text='Number of tokens used for this conversation')),
                ('ai_model_used', models.CharField(blank=True, help_text='AI model used for this conversation', max_length=100)),
                ('response_time_ms', models.IntegerField(default=0, help_text='Response time in milliseconds')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(help_text='User who initiated the conversation', on_delete=django.db.models.deletion.CASCADE, related_name='ai_conversations', to=settings.AUTH_USER_MODEL)),
                ('project', models.ForeignKey(blank=True, help_text='Project context for the conversation', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='ai_conversations', to='opie.project')),
            ],
            options={
                'verbose_name': 'AI Conversation',
                'verbose_name_plural': 'AI Conversations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProjectInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Name of this instruction template', max_length=255)),
                ('content', models.TextField(help_text='The instruction/prompt content for AI processing')),
                ('description', models.TextField(blank=True, help_text='Description of what this instruction does', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this instruction is currently active')),
                ('instruction_type', models.CharField(choices=[('vault_chat', 'Vault Chat'), ('file_insight', 'File Insight Generation'), ('summary', 'Document Summary'), ('extraction', 'Data Extraction'), ('custom', 'Custom')], default='vault_chat', help_text='Type of instruction for different use cases', max_length=50)),
                ('created_by', models.ForeignKey(help_text='User who created this instruction', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_project_instructions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Project Instruction',
                'verbose_name_plural': 'Project Instructions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='project',
            name='instruction',
            field=models.ForeignKey(blank=True, help_text="Custom instruction template for this project's AI operations", null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='opie.projectinstruction'),
        ),
        migrations.CreateModel(
            name='StorageBucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Display name for this storage configuration', max_length=255)),
                ('provider', models.CharField(choices=[('local', 'Local Storage'), ('aws_s3', 'Amazon S3'), ('gcs', 'Google Cloud Storage')], default='gcs', help_text='Storage provider type', max_length=10)),
                ('bucket_name', models.CharField(help_text="Actual bucket name (e.g. 'my-company-docs')", max_length=255)),
                ('region', models.CharField(blank=True, help_text='Storage region (if applicable)', max_length=50, null=True)),
                ('credentials', models.JSONField(blank=True, help_text='Storage credentials (encrypted). Not needed for system buckets.', null=True)),
                ('is_system', models.BooleanField(default=False, help_text='Whether this is a system bucket (e.g. bh-opie-media)')),
                ('team', models.ForeignKey(blank=True, help_text='Optional team. System buckets have no team.', null=True, on_delete=django.db.models.deletion.CASCADE, to='teams.team', verbose_name='Team')),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='storage_bucket',
            field=models.ForeignKey(help_text='Storage bucket where this file is stored', null=True, on_delete=django.db.models.deletion.SET_NULL, to='opie.storagebucket'),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.ManyToManyField(blank=True, to='opie.tag'),
        ),
        migrations.CreateModel(
            name='TeamProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_team_projects', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='opie.tag')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.team', verbose_name='Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamTokenSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('total_tokens', models.BigIntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('team', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='token_summary', to='teams.team')),
            ],
            options={
                'verbose_name': 'Team Token Summary',
                'verbose_name_plural': 'Team Token Summaries',
            },
        ),
        migrations.CreateModel(
            name='TokenUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('session_id', models.CharField(blank=True, max_length=128, null=True)),
                ('agent_id', models.CharField(blank=True, max_length=128, null=True)),
                ('agent_name', models.CharField(max_length=255)),
                ('chat_name', models.CharField(blank=True, max_length=128, null=True)),
                ('request_id', models.CharField(max_length=255)),
                ('model_provider', models.CharField(max_length=50)),
                ('model_name', models.CharField(max_length=100)),
                ('input_tokens', models.PositiveIntegerField(default=0)),
                ('output_tokens', models.PositiveIntegerField(default=0)),
                ('total_tokens', models.PositiveIntegerField(default=0)),
                ('cost', models.FloatField(default=0.0)),
                ('user_msg', models.TextField(blank=True, null=True)),
                ('assistant_msg', models.TextField(blank=True, null=True)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='token_usages', to='teams.team')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='token_usages', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Token Usage',
                'verbose_name_plural': 'Token Usages',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TeamToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_tool_credentials', to='opie.agent')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_credentials', to='teams.team')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_credentials', to='opie.tool')),
            ],
        ),
        migrations.CreateModel(
            name='UserFeedback',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('chat_id', models.CharField(help_text='ID of the chat message or response being reviewed.', max_length=128)),
                ('feedback_type', models.CharField(choices=[('good', 'Good'), ('bad', 'Bad')], max_length=8)),
                ('feedback_text', models.TextField(blank=True, help_text='Optional user feedback.', null=True)),
                ('session', models.ForeignKey(help_text='Related chat session.', on_delete=django.db.models.deletion.CASCADE, related_name='feedbacks', to='opie.chatsession')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='feedbacks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserTokenSummary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('quota_tokens', models.BigIntegerField(default=0)),
                ('rollover_tokens', models.BigIntegerField(default=0)),
                ('total_tokens', models.BigIntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('period_start', models.DateField()),
                ('period_end', models.DateField()),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='token_summary', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Token Summary',
                'verbose_name_plural': 'User Token Summaries',
            },
        ),
        migrations.CreateModel(
            name='UserToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_tool_credentials', to='opie.agent')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_credentials', to='opie.tool')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_credentials', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VaultFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(blank=True, max_length=1024, null=True, upload_to=apps.opie.models.vault_file_path)),
                ('original_filename', models.CharField(blank=True, help_text='Original filename as uploaded by user', max_length=1024, null=True)),
                ('size', models.BigIntegerField(blank=True, help_text='Size of file in bytes', null=True)),
                ('type', models.CharField(blank=True, help_text='File MIME type or extension', max_length=128, null=True)),
                ('is_folder', models.BooleanField(default=False, help_text="True if this is a folder, False if it's a file")),
                ('parent_id', models.BigIntegerField(default=0, help_text='ID of parent folder, 0 if root level')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_embedded', models.BooleanField(default=False, help_text='Whether file content has been embedded')),
                ('embedding_status', models.CharField(choices=[('not_started', 'Not Started'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='not_started', help_text='Current embedding status', max_length=20)),
                ('embedding_error', models.TextField(blank=True, help_text='Error message if embedding failed', null=True)),
                ('embedded_at', models.DateTimeField(blank=True, help_text='When the file was embedded', null=True)),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vault_files', to='opie.project')),
                ('shared_with_teams', models.ManyToManyField(blank=True, related_name='shared_team_vault_files', to='teams.team')),
                ('shared_with_users', models.ManyToManyField(blank=True, related_name='shared_vault_files', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='vault_files', to='teams.team')),
                ('uploaded_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vault_files', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Vault File',
                'verbose_name_plural': 'Vault Files',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AiProcessingQueue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.IntegerField(default=5, help_text='Processing priority (1=highest, 10=lowest)')),
                ('status', models.CharField(choices=[('queued', 'Queued'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='queued', max_length=20)),
                ('retry_count', models.IntegerField(default=0, help_text='Number of retry attempts')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('scheduled_at', models.DateTimeField(auto_now_add=True, help_text='When the task was scheduled')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the task was processed', null=True)),
                ('vault_file', models.ForeignKey(help_text='File to process', on_delete=django.db.models.deletion.CASCADE, related_name='ai_processing_queue', to='opie.vaultfile')),
            ],
            options={
                'verbose_name': 'AI Processing Queue',
                'verbose_name_plural': 'AI Processing Queue Items',
                'ordering': ['priority', 'scheduled_at'],
            },
        ),
        migrations.CreateModel(
            name='VaultFileInsight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('summary', models.TextField(blank=True, help_text='AI-generated summary of the file content')),
                ('key_points', models.JSONField(blank=True, default=list, help_text='List of key points extracted from the file')),
                ('extracted_entities', models.JSONField(blank=True, default=dict, help_text='Named entities extracted (people, places, dates, etc.)')),
                ('tags', models.JSONField(blank=True, default=list, help_text='AI-generated tags for categorization')),
                ('file_type_category', models.CharField(blank=True, help_text='AI-determined file category (contract, report, etc.)', max_length=100)),
                ('processing_status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current processing status of AI insights', max_length=20)),
                ('ai_model_used', models.CharField(blank=True, help_text='AI model used for generating insights', max_length=100)),
                ('tokens_used', models.IntegerField(default=0, help_text='Number of tokens used for processing')),
                ('confidence_score', models.FloatField(default=0.0, help_text='Confidence score of the AI insights (0-1)')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When the insights were generated', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('vault_file', models.OneToOneField(help_text='The vault file this insight belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='ai_insight', to='opie.vaultfile')),
            ],
            options={
                'verbose_name': 'Vault File Insight',
                'verbose_name_plural': 'Vault File Insights',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.URLField(help_text='The website URL to be crawled.', max_length=500, unique=True)),
                ('name', models.CharField(blank=True, help_text='Optional name or label for the website.', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the website.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this website is active and should be crawled.')),
                ('last_crawled', models.DateTimeField(blank=True, help_text='Last time this website was crawled.', null=True)),
                ('crawl_status', models.CharField(choices=[('pending', 'Pending'), ('crawling', 'Crawling'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current crawling status.', max_length=50)),
                ('owner', models.ForeignKey(help_text='User who added this website.', on_delete=django.db.models.deletion.CASCADE, related_name='owned_websites', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='Optional tags for organizing websites.', to='opie.tag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='opie.agent')),
            ],
            options={
                'unique_together': {('agent', 'key')},
            },
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['-updated_at'], name='opie_chatse_updated_e410a6_idx'),
        ),
        migrations.AddIndex(
            model_name='chatsession',
            index=models.Index(fields=['user', 'agent'], name='opie_chatse_user_id_69a521_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='collection',
            unique_together={('name', 'parent')},
        ),
        migrations.AddIndex(
            model_name='ephemeralfile',
            index=models.Index(fields=['session_id'], name='opie_epheme_session_2a39c0_idx'),
        ),
        migrations.AddIndex(
            model_name='fileknowledgebaselink',
            index=models.Index(fields=['file', 'knowledge_base'], name='opie_filekn_file_id_e4abed_idx'),
        ),
        migrations.AddIndex(
            model_name='fileknowledgebaselink',
            index=models.Index(fields=['ingestion_status'], name='opie_filekn_ingesti_3149c7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fileknowledgebaselink',
            unique_together={('file', 'knowledge_base')},
        ),
        migrations.AlterUniqueTogether(
            name='knowledgebasepdfurl',
            unique_together={('kb', 'url')},
        ),
        migrations.AlterUniqueTogether(
            name='knowledgebasepermission',
            unique_together={('knowledge_base', 'team')},
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['user', 'project'], name='opie_aiconv_user_id_216987_idx'),
        ),
        migrations.AddIndex(
            model_name='aiconversation',
            index=models.Index(fields=['created_at'], name='opie_aiconv_created_0e3608_idx'),
        ),
        migrations.AddIndex(
            model_name='projectinstruction',
            index=models.Index(fields=['instruction_type', 'is_active'], name='opie_projec_instruc_5ce8a7_idx'),
        ),
        migrations.AddIndex(
            model_name='projectinstruction',
            index=models.Index(fields=['created_by'], name='opie_projec_created_520aef_idx'),
        ),
        migrations.AddIndex(
            model_name='storagebucket',
            index=models.Index(fields=['team', 'is_system'], name='opie_stor_team_id_1e43c2_idx'),
        ),
        migrations.AddIndex(
            model_name='storagebucket',
            index=models.Index(fields=['bucket_name'], name='opie_stor_bucket__53379e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storagebucket',
            unique_together={('team', 'bucket_name')},
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['-created_at'], name='opie_file_created_e3e608_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['uploaded_by', 'file_type'], name='opie_file_uploade_936197_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['team', 'file_type'], name='opie_file_team_id_83450d_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['storage_bucket', 'storage_path'], name='opie_file_storage_70a53a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamtoolcredential',
            unique_together={('team', 'tool', 'agent')},
        ),
        migrations.AlterUniqueTogether(
            name='usertoolcredential',
            unique_together={('user', 'tool', 'agent')},
        ),
        migrations.AddIndex(
            model_name='aiprocessingqueue',
            index=models.Index(fields=['status', 'priority'], name='opie_aiproc_status_220e6b_idx'),
        ),
        migrations.AddIndex(
            model_name='aiprocessingqueue',
            index=models.Index(fields=['vault_file', 'status'], name='opie_aiproc_vault_f_b90de9_idx'),
        ),
        migrations.AddIndex(
            model_name='vaultfileinsight',
            index=models.Index(fields=['processing_status'], name='opie_vaultf_process_e2e44e_idx'),
        ),
        migrations.AddIndex(
            model_name='vaultfileinsight',
            index=models.Index(fields=['vault_file', 'processing_status'], name='opie_vaultf_vault_f_55f28b_idx'),
        ),
    ]
