# Generated by Django 5.1.5 on 2025-05-05 14:43

import apps.reggie.models
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('djstripe', '0012_2_8'),
        ('teams', '0002_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Capability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Capabilities',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='FileTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('knowledge_type', models.CharField(choices=[('agno_pgvector', 'Agno PGVector (default)'), ('llamaindex', 'LlamaIndex VectorStore'), ('arxiv', 'ArXiv Papers'), ('combined', 'Combined Knowledge Base'), ('csv', 'CSV Files'), ('document', 'Document Files (DOCX)'), ('json', 'JSON Files'), ('langchain', 'LangChain Retriever'), ('pdf', 'Local PDF Files'), ('pdf_url', 'PDF Files from URLs'), ('s3_pdf', 'PDF Files from S3'), ('s3_text', 'Text Files from S3'), ('text', 'Local Text Files'), ('website', 'Website Data'), ('wikipedia', 'Wikipedia Articles'), ('other', 'Other Knowledge Type')], default='llamaindex', help_text='Defines how this knowledge base is structured (e.g., PDFs, SQL, API, etc.).', max_length=20)),
                ('path', models.CharField(blank=True, help_text='Path for files or storage location (e.g., local dir, URL, S3 bucket).', max_length=500, null=True)),
                ('unique_code', models.UUIDField(default=apps.reggie.models.generate_full_uuid, editable=False, help_text='Globally unique identifier for the knowledge base.', unique=True)),
                ('knowledgebase_id', models.CharField(blank=True, editable=False, help_text='Unique slugified identifier used for referencing and table naming.', max_length=64, unique=True)),
                ('vector_table_name', models.CharField(blank=True, editable=False, help_text='Postgres vector table name used for embeddings.', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the knowledge base was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the knowledge base was last updated.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('google', 'Google'), ('anthropic', 'Anthropic'), ('groq', 'Groq')], help_text='LLM provider (e.g., OpenAI, Google, Anthropic, Groq).', max_length=20)),
                ('model_name', models.CharField(help_text='Model identifier (e.g., gpt-4o, gemini-pro, claude-3).', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the model, its strengths, or use case (e.g., best for summarization).', null=True)),
                ('embedder_id', models.CharField(blank=True, help_text="ID of the embedder model (e.g., 'text-embedding-ada-002', 'text-embedding-004')", max_length=100, null=True)),
                ('embedder_dimensions', models.IntegerField(blank=True, help_text='Vector size of the embedder (e.g., 1536, 768)', null=True)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this model is available for use.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('tool_identifier', models.CharField(help_text="Used in code to identify the tool (e.g., 'github')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('required_fields', models.JSONField(default=dict, help_text='Expected fields to initialize the tool')),
                ('is_enabled', models.BooleanField(default=True, help_text='Controls availability for all users')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('agent_id', models.CharField(blank=True, editable=False, help_text='Unique identifier for the agent, used for session storage.', max_length=64)),
                ('unique_code', models.UUIDField(default=apps.reggie.models.generate_full_uuid, editable=False, help_text='Unique identifier for the agent, used for session storage.', unique=True)),
                ('memory_table', models.CharField(blank=True, editable=False, help_text='Table name for memory persistence, unique to this agent.', max_length=255, unique=True)),
                ('session_table', models.CharField(blank=True, editable=False, help_text='Table name for session persistence, derived from unique_code.', max_length=255, unique=True)),
                ('agent_knowledge_id', models.CharField(blank=True, editable=False, help_text='Table name for knowledge base persistence, derived from unique_code.', max_length=255, null=True, unique=True)),
                ('search_knowledge', models.BooleanField(default=True)),
                ('cite_knowledge', models.BooleanField(default=True)),
                ('read_chat_history', models.BooleanField(default=True)),
                ('add_datetime_to_instructions', models.BooleanField(default=True)),
                ('show_tool_calls', models.BooleanField(default=False)),
                ('read_tool_call_history', models.BooleanField(default=True)),
                ('markdown_enabled', models.BooleanField(default=True)),
                ('debug_mode', models.BooleanField(default=False, help_text='Enable debug mode for logging.')),
                ('num_history_responses', models.IntegerField(default=3, help_text='Number of past responses to keep in chat memory.')),
                ('add_history_to_messages', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('subscriptions', models.ManyToManyField(blank=True, related_name='agents', to='djstripe.subscription')),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='teams.team')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentExpectedOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for this expected output, e.g., 'Basic Research Report'.", max_length=255, null=True)),
                ('expected_output', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Response Handling & Formatting', max_length=50)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to='reggie.agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='outputs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='expected_output',
            field=models.ForeignKey(blank=True, help_text='The predefined expected output template assigned to this agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='reggie.agentexpectedoutput'),
        ),
        migrations.CreateModel(
            name='AgentInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for the instruction, e.g., 'Default Retrieval Strategy'.", max_length=255, null=True)),
                ('instruction', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Template', max_length=50)),
                ('is_template', models.BooleanField(default=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('is_system', models.BooleanField(default=False, help_text='Flag for platform/system-level instructions.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instructions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='instructions',
            field=models.ForeignKey(blank=True, help_text='The predefined instructions assigned to this agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='reggie.agentinstruction'),
        ),
        migrations.CreateModel(
            name='AgentUIProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('text_color', models.CharField(blank=True, max_length=255, null=True)),
                ('background_color', models.CharField(blank=True, max_length=255, null=True)),
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ui_properties', to='reggie.agent')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='agent',
            name='capabilities',
            field=models.ManyToManyField(blank=True, related_name='agents', to='reggie.capability'),
        ),
        migrations.AddField(
            model_name='agent',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='reggie.category'),
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(help_text="Upload a file to the user's file library. Supported types: pdf, docx, txt, csv, json", max_length=1024, upload_to=apps.reggie.models.user_file_path)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('txt', 'TXT'), ('csv', 'CSV'), ('json', 'JSON'), ('other', 'Other')], default='pdf', help_text='Detected type of the uploaded file.', max_length=10)),
                ('storage_path', models.CharField(help_text="Full storage path including bucket (e.g. 'gcs://bucket/path' or 's3://bucket/path')", max_length=1024)),
                ('original_path', models.CharField(blank=True, help_text='Original path/name of the file before upload', max_length=1024, null=True)),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10)),
                ('is_global', models.BooleanField(default=False, help_text='Global public library files.')),
                ('is_ingested', models.BooleanField(default=False, help_text='Whether the file has been successfully ingested into any knowledge base.')),
                ('auto_ingest', models.BooleanField(default=False, help_text='Whether to automatically ingest this file after upload.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_files', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='files', to='teams.team')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_files', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, related_name='files', to='reggie.filetag')),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_ingest_files', 'Can ingest files into knowledge base'), ('can_manage_global_files', 'Can manage global files')],
            },
        ),
        migrations.CreateModel(
            name='FileKnowledgeBaseLink',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ingestion_status', models.CharField(choices=[('not_started', 'Not Started'), ('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='not_started', help_text='Current status of the ingestion process for this file in this knowledge base.', max_length=20)),
                ('ingestion_error', models.TextField(blank=True, help_text='Error message if ingestion failed.', null=True)),
                ('ingestion_started_at', models.DateTimeField(blank=True, help_text='When the ingestion process started.', null=True)),
                ('ingestion_completed_at', models.DateTimeField(blank=True, help_text='When the ingestion process completed.', null=True)),
                ('ingestion_progress', models.FloatField(default=0.0, help_text='Current progress of ingestion (0-100)')),
                ('processed_docs', models.IntegerField(default=0, help_text='Number of documents processed')),
                ('total_docs', models.IntegerField(default=0, help_text='Total number of documents to process')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_base_links', to='reggie.file')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_links', to='reggie.knowledgebase')),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='knowledge_bases',
            field=models.ManyToManyField(blank=True, help_text='Knowledge bases this file is linked to for ingestion.', related_name='linked_files', through='reggie.FileKnowledgeBaseLink', to='reggie.knowledgebase'),
        ),
        migrations.AddField(
            model_name='agent',
            name='knowledge_base',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='reggie.knowledgebase'),
        ),
        migrations.CreateModel(
            name='KnowledgeBasePdfURL',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField(max_length=500)),
                ('is_enabled', models.BooleanField(default=True)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('kb', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pdf_urls', to='reggie.knowledgebase')),
                ('uploaded_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='knowledgebase',
            name='model_provider',
            field=models.ForeignKey(help_text='LLM provider to use for embeddings in this knowledge base.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='reggie.modelprovider'),
        ),
        migrations.AddField(
            model_name='agent',
            name='model',
            field=models.ForeignKey(blank=True, help_text='AI model used by the agent.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='reggie.modelprovider'),
        ),
        migrations.CreateModel(
            name='StorageBucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text='Display name for this storage configuration', max_length=255)),
                ('provider', models.CharField(choices=[('local', 'Local Storage'), ('aws_s3', 'Amazon S3'), ('gcs', 'Google Cloud Storage')], default='gcs', help_text='Storage provider type', max_length=10)),
                ('bucket_name', models.CharField(help_text="Actual bucket name (e.g. 'my-company-docs')", max_length=255)),
                ('region', models.CharField(blank=True, help_text='Storage region (if applicable)', max_length=50, null=True)),
                ('credentials', models.JSONField(blank=True, help_text='Storage credentials (encrypted). Not needed for system buckets.', null=True)),
                ('is_system', models.BooleanField(default=False, help_text='Whether this is a system bucket (e.g. bh-reggie-media)')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.team', verbose_name='Team')),
            ],
        ),
        migrations.AddField(
            model_name='file',
            name='storage_bucket',
            field=models.ForeignKey(help_text='Storage bucket where this file is stored', null=True, on_delete=django.db.models.deletion.SET_NULL, to='reggie.storagebucket'),
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_projects', to=settings.AUTH_USER_MODEL)),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_projects', to=settings.AUTH_USER_MODEL)),
                ('team', models.ForeignKey(blank=True, help_text='Team this project belongs to (optional if personal).', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to='teams.team')),
                ('tags', models.ManyToManyField(blank=True, to='reggie.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('starred_by', models.ManyToManyField(blank=True, related_name='starred_team_projects', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, to='reggie.tag')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='teams.team', verbose_name='Team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='team_tool_credentials', to='reggie.agent')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_credentials', to='teams.team')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_credentials', to='reggie.tool')),
            ],
        ),
        migrations.CreateModel(
            name='UserToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_tool_credentials', to='reggie.agent')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_credentials', to='reggie.tool')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_credentials', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.URLField(help_text='The website URL to be crawled.', max_length=500, unique=True)),
                ('name', models.CharField(blank=True, help_text='Optional name or label for the website.', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the website.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this website is active and should be crawled.')),
                ('last_crawled', models.DateTimeField(blank=True, help_text='Last time this website was crawled.', null=True)),
                ('crawl_status', models.CharField(choices=[('pending', 'Pending'), ('crawling', 'Crawling'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current crawling status.', max_length=50)),
                ('owner', models.ForeignKey(help_text='User who added this website.', on_delete=django.db.models.deletion.CASCADE, related_name='owned_websites', to=settings.AUTH_USER_MODEL)),
                ('tags', models.ManyToManyField(blank=True, help_text='Optional tags for organizing websites.', to='reggie.tag')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='reggie.agent')),
            ],
            options={
                'unique_together': {('agent', 'key')},
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='New Chat', help_text='Title of the chat session', max_length=255)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to='reggie.agent')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chat_sessions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-updated_at'],
                'indexes': [models.Index(fields=['-updated_at'], name='reggie_chat_updated_6ab6e4_idx'), models.Index(fields=['user', 'agent'], name='reggie_chat_user_id_ce7ea0_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='fileknowledgebaselink',
            index=models.Index(fields=['file', 'knowledge_base'], name='reggie_file_file_id_258195_idx'),
        ),
        migrations.AddIndex(
            model_name='fileknowledgebaselink',
            index=models.Index(fields=['ingestion_status'], name='reggie_file_ingesti_7c59e7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='fileknowledgebaselink',
            unique_together={('file', 'knowledge_base')},
        ),
        migrations.AlterUniqueTogether(
            name='knowledgebasepdfurl',
            unique_together={('kb', 'url')},
        ),
        migrations.AddIndex(
            model_name='storagebucket',
            index=models.Index(fields=['team', 'is_system'], name='reggie_stor_team_id_1e43c2_idx'),
        ),
        migrations.AddIndex(
            model_name='storagebucket',
            index=models.Index(fields=['bucket_name'], name='reggie_stor_bucket__53379e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='storagebucket',
            unique_together={('team', 'bucket_name')},
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['-created_at'], name='reggie_file_created_9d5526_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['uploaded_by', 'file_type'], name='reggie_file_uploade_57fd0f_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['team', 'file_type'], name='reggie_file_team_id_5e0f53_idx'),
        ),
        migrations.AddIndex(
            model_name='file',
            index=models.Index(fields=['storage_bucket', 'storage_path'], name='reggie_file_storage_dbdc04_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='teamtoolcredential',
            unique_together={('team', 'tool', 'agent')},
        ),
        migrations.AlterUniqueTogether(
            name='usertoolcredential',
            unique_together={('user', 'tool', 'agent')},
        ),
    ]
