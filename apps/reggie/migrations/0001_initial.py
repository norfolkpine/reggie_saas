# Generated by Django 5.1.5 on 2025-04-10 21:33

import apps.reggie.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('djstripe', '0012_2_8'),
    ]

    operations = [
        migrations.CreateModel(
            name='AgentExpectedOutput',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for this expected output, e.g., 'Basic Research Report'.", max_length=255, null=True)),
                ('expected_output', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Response Handling & Formatting', max_length=50)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentInstruction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(blank=True, help_text="Optional title for the instruction, e.g., 'Default Retrieval Strategy'.", max_length=255, null=True)),
                ('instruction', models.TextField()),
                ('category', models.CharField(choices=[('Scope & Knowledge Boundaries', 'Scope & Knowledge Boundaries'), ('Information Retrieval & Accuracy', 'Information Retrieval & Accuracy'), ('Response Handling & Formatting', 'Response Handling & Formatting'), ('Compliance-Specific Instructions', 'Compliance-Specific Instructions'), ('Personality', 'Personality'), ('Process', 'Process'), ('Improvement', 'Improvement'), ('Template', 'Template'), ('User', 'User-Defined Primary Instruction'), ('System', 'System-Level Instruction')], default='Template', max_length=50)),
                ('is_template', models.BooleanField(default=True)),
                ('is_enabled', models.BooleanField(default=True)),
                ('is_global', models.BooleanField(default=False)),
                ('is_system', models.BooleanField(default=False, help_text='Flag for platform/system-level instructions.')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='AgentParameter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('key', models.CharField(max_length=255)),
                ('value', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='AgentUIProperties',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('icon', models.CharField(blank=True, max_length=255, null=True)),
                ('text_color', models.CharField(blank=True, max_length=255, null=True)),
                ('background_color', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Capability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Capabilities',
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='ChatSession',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(default='New Chat', max_length=255)),
            ],
            options={
                'ordering': ['-updated_at'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('file', models.FileField(help_text="Upload a file to the user's document library. Supported types: pdf, docx, txt, csv, json", upload_to=apps.reggie.models.user_document_path)),
                ('file_type', models.CharField(choices=[('pdf', 'PDF'), ('docx', 'DOCX'), ('txt', 'TXT'), ('csv', 'CSV'), ('json', 'JSON'), ('other', 'Other')], default='pdf', help_text='Type of the file. Supported types: pdf, docx, txt, csv, json', max_length=10)),
                ('visibility', models.CharField(choices=[('public', 'Public'), ('private', 'Private')], default='private', max_length=10)),
                ('is_global', models.BooleanField(default=False, help_text='Global public library document.')),
                ('source', models.CharField(blank=True, max_length=255, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('knowledge_type', models.CharField(choices=[('arxiv', 'ArXiv Papers'), ('combined', 'Combined Knowledge Base'), ('csv', 'CSV Files'), ('document', 'Document Files (DOCX)'), ('json', 'JSON Files'), ('langchain', 'LangChain Retriever'), ('pdf', 'Local PDF Files'), ('pdf_url', 'PDF Files from URLs'), ('s3_pdf', 'PDF Files from S3'), ('s3_text', 'Text Files from S3'), ('text', 'Local Text Files'), ('website', 'Website Data'), ('wikipedia', 'Wikipedia Articles'), ('other', 'Other Knowledge Type')], default='pdf', help_text='Defines how this knowledge base is structured (e.g., PDFs, SQL, API, etc.).', max_length=20)),
                ('path', models.CharField(blank=True, help_text='Path for files or storage location (e.g., local dir, URL, S3 bucket).', max_length=500, null=True)),
                ('vector_table_name', models.CharField(help_text='Vector database table name for embeddings.', max_length=255, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Timestamp when the knowledge base was created.')),
                ('updated_at', models.DateTimeField(auto_now=True, help_text='Timestamp when the knowledge base was last updated.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ModelProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.CharField(choices=[('openai', 'OpenAI'), ('google', 'Google'), ('anthropic', 'Anthropic'), ('groq', 'Groq')], help_text='LLM provider (e.g., OpenAI, Google, Anthropic, Groq).', max_length=20)),
                ('model_name', models.CharField(help_text='Model identifier (e.g., gpt-4o, gemini-pro, claude-3).', max_length=50, unique=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the model, its strengths, or use case (e.g., best for summarization).', null=True)),
                ('embedder_id', models.CharField(blank=True, help_text="ID of the embedder model (e.g., 'text-embedding-ada-002', 'text-embedding-004')", max_length=100, null=True)),
                ('embedder_dimensions', models.IntegerField(blank=True, help_text='Vector size of the embedder (e.g., 1536, 768)', null=True)),
                ('is_enabled', models.BooleanField(default=True, help_text='Whether this model is available for use.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SlackWorkspace',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('slack_team_id', models.CharField(max_length=255, unique=True)),
                ('slack_team_name', models.CharField(max_length=255)),
                ('access_token', models.CharField(max_length=255)),
                ('bot_user_id', models.CharField(blank=True, max_length=255, null=True)),
                ('installed_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StorageBucket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text="Name of the storage bucket (e.g., 'Main Tax Docs')", max_length=255, unique=True)),
                ('provider', models.CharField(choices=[('local', 'Local Storage'), ('aws_s3', 'Amazon S3'), ('gcs', 'Google Cloud Storage')], default='local', help_text='Storage provider (Local, AWS S3, or Google Cloud Storage).', max_length=10)),
                ('bucket_url', models.CharField(help_text="Full storage bucket URL (e.g., 's3://my-bucket/', 'gcs://my-bucket/', or local path)", max_length=500, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TeamToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tool',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('tool_identifier', models.CharField(help_text="Used in code to identify the tool (e.g., 'github')", max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('required_fields', models.JSONField(default=dict, help_text='Expected fields to initialize the tool')),
                ('is_enabled', models.BooleanField(default=True, help_text='Controls availability for all users')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserToolCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Website',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('url', models.URLField(help_text='The website URL to be crawled.', max_length=500, unique=True)),
                ('name', models.CharField(blank=True, help_text='Optional name or label for the website.', max_length=255, null=True)),
                ('description', models.TextField(blank=True, help_text='Optional description of the website.', null=True)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this website is active and should be crawled.')),
                ('last_crawled', models.DateTimeField(blank=True, help_text='Last time this website was crawled.', null=True)),
                ('crawl_status', models.CharField(choices=[('pending', 'Pending'), ('crawling', 'Crawling'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', help_text='Current crawling status.', max_length=50)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('agent_id', models.CharField(blank=True, editable=False, help_text='Unique identifier for the agent, used for session storage.', max_length=64)),
                ('unique_code', models.UUIDField(default=apps.reggie.models.generate_full_uuid, editable=False, help_text='Unique identifier for the agent, used for session storage.', unique=True)),
                ('memory_table', models.CharField(blank=True, editable=False, help_text='Table name for memory persistence, unique to this agent.', max_length=255, unique=True)),
                ('session_table', models.CharField(blank=True, editable=False, help_text='Table name for session persistence, derived from unique_code.', max_length=255, unique=True)),
                ('knowledge_table', models.CharField(blank=True, editable=False, help_text='Table name for knowledge base persistence, derived from unique_code.', max_length=255, null=True)),
                ('search_knowledge', models.BooleanField(default=True)),
                ('cite_knowledge', models.BooleanField(default=True)),
                ('read_chat_history', models.BooleanField(default=True)),
                ('add_datetime_to_instructions', models.BooleanField(default=True)),
                ('show_tool_calls', models.BooleanField(default=False)),
                ('read_tool_call_history', models.BooleanField(default=True)),
                ('markdown_enabled', models.BooleanField(default=True)),
                ('debug_mode', models.BooleanField(default=False, help_text='Enable debug mode for logging.')),
                ('num_history_responses', models.IntegerField(default=3, help_text='Number of past responses to keep in chat memory.')),
                ('is_global', models.BooleanField(default=False)),
                ('subscriptions', models.ManyToManyField(blank=True, related_name='agents', to='djstripe.subscription')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
