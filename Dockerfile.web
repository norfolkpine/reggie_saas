# syntax = docker/dockerfile:1.5
# Multi-stage Docker buildfile
# See https://docs.docker.com/build/building/multi-stage/

# Stage 1: Build the python dependencies
FROM python:3.13.5-slim-bookworm as build-python

# Include any build time OS dependencies here.
RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean && \
    apt-get update \
    # dependencies for building Python packages
    && apt-get install -y build-essential libpq-dev

COPY ./requirements /requirements
RUN --mount=type=cache,target=/root/.cache \
    pip wheel --no-deps --wheel-dir /wheels \
    -r /requirements/requirements.txt

# Stage 2: Build the front end files
FROM node:22-bookworm-slim AS build-node
RUN nodejs -v && npm -v
WORKDIR /code
COPY *.json *.js .babelrc /code/
COPY assets /code/assets/
COPY api-client /code/api-client/

RUN npm install

# build needs everything because it needs to be able to do the tailwind class detection / purging stuff
COPY . /code
RUN npm run build

# Stage 3: Build the final image
# This copies the python dependencies from the first stage
# and the front end files from the second stage.
# Add any runtime OS dependencies here.
FROM python:3.13.5-slim-bookworm

# Build arguments for collectstatic
ARG SECRET_KEY
ARG DEBUG=0
ARG DATABASE_URL
ARG DJANGO_DATABASE_HOST
ARG SYSTEM_API_KEY
ARG FORCE_GCP_DETECTION=True
ARG GOOGLE_APPLICATION_CREDENTIALS_JSON_B64

# DNS resolution is handled by Docker at runtime

# Install libmagic for python-magic
RUN apt-get update && apt-get install -y --no-install-recommends libmagic1 && rm -rf /var/lib/apt/lists/*

ENV PYTHONUNBUFFERED=1
ENV DEBUG=$DEBUG

RUN --mount=target=/var/lib/apt/lists,type=cache,sharing=locked \
    --mount=target=/var/cache/apt,type=cache,sharing=locked \
    rm -f /etc/apt/apt.conf.d/docker-clean && \
    apt-get update \
    && apt-get install -y \
    curl \
    wget \
    unzip \
    gnupg2 \
    # psycopg2 dependencies
    libpq-dev \
    # Translations dependencies
    gettext \
    # Install Google Chrome
    && wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | gpg --dearmor -o /usr/share/keyrings/google-chrome.gpg \
    && echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-chrome.gpg] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
    && apt-get update \
    && apt-get install -y google-chrome-stable \
    # Install ChromeDriver matching the installed Chrome version
    && CHROME_VERSION_FULL=$(google-chrome-stable --version | awk '{print $3}') \
    && echo "Installed Chrome version: $CHROME_VERSION_FULL" \
    && CHROMEDRIVER_URL="https://storage.googleapis.com/chrome-for-testing-public/${CHROME_VERSION_FULL}/linux64/chromedriver-linux64.zip" \
    && echo "Downloading ChromeDriver from: $CHROMEDRIVER_URL" \
    && wget --progress=bar:force:noscroll -O /tmp/chromedriver.zip "$CHROMEDRIVER_URL" \
    && unzip /tmp/chromedriver.zip -d /tmp/ \
    && mv /tmp/chromedriver-linux64/chromedriver /usr/local/bin/chromedriver \
    && chmod +x /usr/local/bin/chromedriver \
    && rm /tmp/chromedriver.zip \
    && rm -rf /tmp/chromedriver-linux64 \
    # cleaning up unused files
    && apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false

RUN addgroup --system django \
    && adduser --system --ingroup django --home /home/django django
RUN mkdir -p /home/django && chown django:django /home/django

COPY --from=build-python /wheels /wheels
COPY ./requirements /requirements
RUN --mount=type=cache,target=/root/.cache \
    pip install --find-links=/wheels \
    -r /requirements/requirements.txt \
    && rm -rf /wheels

WORKDIR /code

COPY --chown=django:django . /code
COPY --from=build-node /code/static /code/static

# Set environment variables from build args for collectstatic
ENV SECRET_KEY=$SECRET_KEY
ENV DEBUG=$DEBUG
ENV DATABASE_URL=$DATABASE_URL
ENV FORCE_GCP_DETECTION=$FORCE_GCP_DETECTION
ENV DJANGO_DATABASE_HOST=$DJANGO_DATABASE_HOST
ENV SYSTEM_API_KEY=$SYSTEM_API_KEY

# Create GCP credentials file from JSON if provided
RUN if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON_B64" ]; then \
        echo "$GOOGLE_APPLICATION_CREDENTIALS_JSON_B64" | base64 -d > /tmp/gcp-credentials.json && \
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-credentials.json; \
    fi

# why this has to be here:
# https://stackoverflow.com/questions/59719175/where-to-run-collectstatic-when-deploying-django-app-to-heroku-using-docker

# Debug step to verify Django is set up correctly
RUN python /code/manage.py help

# Create staticfiles directory and set proper ownership before collectstatic
RUN mkdir -p /code/staticfiles && chown django:django /code/staticfiles

# Switch to django user for collectstatic to ensure proper permissions
USER django

# Run collectstatic with production settings (uses GCS with metadata service auth)
# Use --clear to ensure clean state and proper permissions
RUN if [ -n "$GOOGLE_APPLICATION_CREDENTIALS_JSON_B64" ]; then \
        export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-credentials.json && \
        python /code/manage.py collectstatic --noinput --clear --settings=bh_opie.settings_production; \
    else \
        python /code/manage.py collectstatic --noinput --clear --settings=bh_opie.settings_production; \
    fi

# Create SSL directory and set ownership
RUN mkdir -p /code/ssl && chown django:django /code/ssl

COPY --chown=django:django docker_startup.sh /start
RUN chmod +x /start
CMD /start
