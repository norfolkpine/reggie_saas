openapi: 3.0.3
info:
  title: Ben Heath SaaS
  version: 0.1.0
  description: BH Blockchain Analytics Platform
paths:
  /a/{team_slug}/team/api/invitations/:
    get:
      operationId: invitations_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedInvitationList'
          description: ''
    post:
      operationId: invitations_create
      parameters:
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invitation'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
  /a/{team_slug}/team/api/invitations/{id}/:
    get:
      operationId: invitations_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invitation.
        required: true
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    put:
      operationId: invitations_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invitation.
        required: true
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Invitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Invitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Invitation'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    patch:
      operationId: invitations_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invitation.
        required: true
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvitation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedInvitation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvitation'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invitation'
          description: ''
    delete:
      operationId: invitations_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invitation.
        required: true
      - in: path
        name: team_slug
        schema:
          type: string
        required: true
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /api/auth/login/:
    post:
      operationId: api_auth_login_create
      description: Custom login view that checks if 2FA is enabled for the user.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
          description: ''
  /api/auth/logout/:
    get:
      operationId: api_auth_logout_retrieve
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
    post:
      operationId: api_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/password/change/:
    post:
      operationId: api_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /api/auth/register/:
    post:
      operationId: api_auth_register_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /api/auth/token/refresh/:
    post:
      operationId: api_auth_token_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenRefresh'
        required: true
      security:
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenRefresh'
          description: ''
  /api/auth/token/verify/:
    post:
      operationId: api_auth_token_verify_create
      description: |-
        Takes a token and indicates if it is valid.  This view provides no
        information about a token's fitness for a particular use.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TokenVerify'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TokenVerify'
        required: true
      security:
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenVerify'
          description: ''
  /api/auth/user/:
    get:
      operationId: api_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    put:
      operationId: api_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CustomUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
    patch:
      operationId: api_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCustomUser'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomUser'
          description: ''
  /api/auth/verify-otp/:
    post:
      operationId: api_auth_verify_otp_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/OtpRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JWT'
          description: ''
  /dashboard/api/user-signups/:
    get:
      operationId: dashboard_api_user_signups_list
      tags:
      - dashboard
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSignupStats'
          description: ''
  /reggie/api/v1/agent-templates/:
    get:
      operationId: reggie_api_v1_agent_templates_retrieve
      description: Returns global instruction templates and expected output templates.
      tags:
      - Agent Templates
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          description: No response body
  /reggie/api/v1/agent/{agent_id}/expected-output/:
    get:
      operationId: reggie_api_v1_agent_expected_output_retrieve
      description: Fetch the specific expected output assigned to the agent.
      parameters:
      - in: path
        name: agent_id
        schema:
          type: integer
        required: true
      tags:
      - Agents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          description: No response body
  /reggie/api/v1/agent/{agent_id}/instructions/:
    get:
      operationId: reggie_api_v1_agent_instructions_retrieve
      description: Fetch the instruction assigned directly to the agent (if enabled).
      parameters:
      - in: path
        name: agent_id
        schema:
          type: integer
        required: true
      tags:
      - Agents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          description: No response body
  /reggie/api/v1/agent/stream-chat/:
    post:
      operationId: reggie_api_v1_agent_stream_chat_create
      tags:
      - Reggie AI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StreamAgentRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StreamAgentRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StreamAgentRequest'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                description: Server-Sent Events stream
          description: ''
  /reggie/api/v1/agents/:
    get:
      operationId: reggie_api_v1_agents_list
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Agents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgentList'
          description: ''
    post:
      operationId: reggie_api_v1_agents_create
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      tags:
      - Agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Agent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Agent'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: ''
  /reggie/api/v1/agents/{id}/:
    get:
      operationId: reggie_api_v1_agents_retrieve
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: ''
    put:
      operationId: reggie_api_v1_agents_update
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Agent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Agent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Agent'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: ''
    patch:
      operationId: reggie_api_v1_agents_partial_update
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAgent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAgent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAgent'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Agent'
          description: ''
    delete:
      operationId: reggie_api_v1_agents_destroy
      description: |-
        API endpoint that allows managing agents.
        Returns:
        - All agents if superuser
        - User's agents + global agents for regular users
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/chat-sessions/:
    get:
      operationId: reggie_api_v1_chat_sessions_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Reggie AI
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedChatSessionList'
          description: ''
    post:
      operationId: reggie_api_v1_chat_sessions_create
      tags:
      - Reggie AI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatSession'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
  /reggie/api/v1/chat-sessions/{id}/:
    get:
      operationId: reggie_api_v1_chat_sessions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Reggie AI
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
    put:
      operationId: reggie_api_v1_chat_sessions_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Reggie AI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ChatSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ChatSession'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
    patch:
      operationId: reggie_api_v1_chat_sessions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Reggie AI
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedChatSession'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedChatSession'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedChatSession'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
    delete:
      operationId: reggie_api_v1_chat_sessions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Reggie AI
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/chat-sessions/{id}/messages/:
    get:
      operationId: reggie_api_v1_chat_sessions_messages_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Reggie AI
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatSession'
          description: ''
  /reggie/api/v1/document-tags/:
    get:
      operationId: reggie_api_v1_document_tags_list
      description: API endpoint that allows managing document tags.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Document Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocumentTagList'
          description: ''
    post:
      operationId: reggie_api_v1_document_tags_create
      description: API endpoint that allows managing document tags.
      tags:
      - Document Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTag'
          description: ''
  /reggie/api/v1/document-tags/{id}/:
    get:
      operationId: reggie_api_v1_document_tags_retrieve
      description: API endpoint that allows managing document tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document tag.
        required: true
      tags:
      - Document Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTag'
          description: ''
    put:
      operationId: reggie_api_v1_document_tags_update
      description: API endpoint that allows managing document tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document tag.
        required: true
      tags:
      - Document Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DocumentTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DocumentTag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTag'
          description: ''
    patch:
      operationId: reggie_api_v1_document_tags_partial_update
      description: API endpoint that allows managing document tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document tag.
        required: true
      tags:
      - Document Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDocumentTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDocumentTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDocumentTag'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentTag'
          description: ''
    delete:
      operationId: reggie_api_v1_document_tags_destroy
      description: API endpoint that allows managing document tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document tag.
        required: true
      tags:
      - Document Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/documents/:
    get:
      operationId: reggie_api_v1_documents_list
      description: API endpoint that allows managing documents.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Documents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDocumentList'
          description: ''
    post:
      operationId: reggie_api_v1_documents_create
      description: API endpoint that allows managing documents.
      tags:
      - Documents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Document'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
  /reggie/api/v1/documents/{id}/:
    get:
      operationId: reggie_api_v1_documents_retrieve
      description: API endpoint that allows managing documents.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document.
        required: true
      tags:
      - Documents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
    put:
      operationId: reggie_api_v1_documents_update
      description: API endpoint that allows managing documents.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document.
        required: true
      tags:
      - Documents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Document'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Document'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
    patch:
      operationId: reggie_api_v1_documents_partial_update
      description: API endpoint that allows managing documents.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document.
        required: true
      tags:
      - Documents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDocument'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedDocument'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDocument'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
          description: ''
    delete:
      operationId: reggie_api_v1_documents_destroy
      description: API endpoint that allows managing documents.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this document.
        required: true
      tags:
      - Documents
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/documents/bulk-upload/:
    post:
      operationId: Bulk Upload Documents
      description: Allows users to bulk upload multiple documents in a single request.
      summary: Upload multiple documents
      tags:
      - Documents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkDocumentUpload'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BulkDocumentUpload'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BulkDocumentUpload'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                description: Bulk upload successful
          description: ''
  /reggie/api/v1/expected-output/:
    get:
      operationId: reggie_api_v1_expected_output_list
      description: API endpoint that allows managing agent expected outputs.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Agent Expected Output
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgentExpectedOutputList'
          description: ''
    post:
      operationId: reggie_api_v1_expected_output_create
      description: API endpoint that allows managing agent expected outputs.
      tags:
      - Agent Expected Output
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExpectedOutput'
          description: ''
  /reggie/api/v1/expected-output/{id}/:
    get:
      operationId: reggie_api_v1_expected_output_retrieve
      description: API endpoint that allows managing agent expected outputs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent expected output.
        required: true
      tags:
      - Agent Expected Output
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExpectedOutput'
          description: ''
    put:
      operationId: reggie_api_v1_expected_output_update
      description: API endpoint that allows managing agent expected outputs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent expected output.
        required: true
      tags:
      - Agent Expected Output
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgentExpectedOutput'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExpectedOutput'
          description: ''
    patch:
      operationId: reggie_api_v1_expected_output_partial_update
      description: API endpoint that allows managing agent expected outputs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent expected output.
        required: true
      tags:
      - Agent Expected Output
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAgentExpectedOutput'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAgentExpectedOutput'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAgentExpectedOutput'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExpectedOutput'
          description: ''
    delete:
      operationId: reggie_api_v1_expected_output_destroy
      description: API endpoint that allows managing agent expected outputs.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent expected output.
        required: true
      tags:
      - Agent Expected Output
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/global-instructions/:
    get:
      operationId: reggie_api_v1_global_instructions_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Global Instruction Templates
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgentInstructionList'
          description: ''
  /reggie/api/v1/global-instructions/{id}/:
    get:
      operationId: reggie_api_v1_global_instructions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent instruction.
        required: true
      tags:
      - Global Instruction Templates
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInstruction'
          description: ''
  /reggie/api/v1/global-outputs/:
    get:
      operationId: reggie_api_v1_global_outputs_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Global Expected Output Templates
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgentExpectedOutputList'
          description: ''
  /reggie/api/v1/global-outputs/{id}/:
    get:
      operationId: reggie_api_v1_global_outputs_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this agent expected output.
        required: true
      tags:
      - Global Expected Output Templates
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentExpectedOutput'
          description: ''
  /reggie/api/v1/instructions/:
    get:
      operationId: reggie_api_v1_instructions_list
      description: API endpoint that allows managing agent instructions.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Agent Instructions
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedAgentInstructionList'
          description: ''
    post:
      operationId: reggie_api_v1_instructions_create
      description: API endpoint that allows managing agent instructions.
      tags:
      - Agent Instructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInstruction'
          description: ''
  /reggie/api/v1/instructions/{id}/:
    get:
      operationId: reggie_api_v1_instructions_retrieve
      description: API endpoint that allows managing agent instructions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agent Instructions
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInstruction'
          description: ''
    put:
      operationId: reggie_api_v1_instructions_update
      description: API endpoint that allows managing agent instructions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agent Instructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AgentInstruction'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInstruction'
          description: ''
    patch:
      operationId: reggie_api_v1_instructions_partial_update
      description: API endpoint that allows managing agent instructions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agent Instructions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedAgentInstruction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedAgentInstruction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedAgentInstruction'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgentInstruction'
          description: ''
    delete:
      operationId: reggie_api_v1_instructions_destroy
      description: API endpoint that allows managing agent instructions.
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - Agent Instructions
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/knowledge-bases/:
    get:
      operationId: reggie_api_v1_knowledge_bases_list
      description: API endpoint that allows managing knowledge bases.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Knowledge Bases
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedKnowledgeBaseList'
          description: ''
    post:
      operationId: reggie_api_v1_knowledge_bases_create
      description: API endpoint that allows managing knowledge bases.
      tags:
      - Knowledge Bases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'
          description: ''
  /reggie/api/v1/knowledge-bases/{id}/:
    get:
      operationId: reggie_api_v1_knowledge_bases_retrieve
      description: API endpoint that allows managing knowledge bases.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this knowledge base.
        required: true
      tags:
      - Knowledge Bases
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'
          description: ''
    put:
      operationId: reggie_api_v1_knowledge_bases_update
      description: API endpoint that allows managing knowledge bases.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this knowledge base.
        required: true
      tags:
      - Knowledge Bases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/KnowledgeBase'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'
          description: ''
    patch:
      operationId: reggie_api_v1_knowledge_bases_partial_update
      description: API endpoint that allows managing knowledge bases.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this knowledge base.
        required: true
      tags:
      - Knowledge Bases
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedKnowledgeBase'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedKnowledgeBase'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedKnowledgeBase'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KnowledgeBase'
          description: ''
    delete:
      operationId: reggie_api_v1_knowledge_bases_destroy
      description: API endpoint that allows managing knowledge bases.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this knowledge base.
        required: true
      tags:
      - Knowledge Bases
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/model-providers/:
    get:
      operationId: reggie_api_v1_model_providers_list
      description: Returns a list of enabled model providers.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Agent Model Providers
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedModelProviderList'
          description: ''
  /reggie/api/v1/model-providers/{id}/:
    get:
      operationId: reggie_api_v1_model_providers_retrieve
      description: Returns a list of enabled model providers.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this model provider.
        required: true
      tags:
      - Agent Model Providers
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModelProvider'
          description: ''
  /reggie/api/v1/projects/:
    get:
      operationId: reggie_api_v1_projects_list
      description: API endpoint that allows managing projects.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Projects
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedProjectList'
          description: ''
    post:
      operationId: reggie_api_v1_projects_create
      description: API endpoint that allows managing projects.
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
  /reggie/api/v1/projects/{id}/:
    get:
      operationId: reggie_api_v1_projects_retrieve
      description: API endpoint that allows managing projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    put:
      operationId: reggie_api_v1_projects_update
      description: API endpoint that allows managing projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Project'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Project'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    patch:
      operationId: reggie_api_v1_projects_partial_update
      description: API endpoint that allows managing projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedProject'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedProject'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
          description: ''
    delete:
      operationId: reggie_api_v1_projects_destroy
      description: API endpoint that allows managing projects.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this project.
        required: true
      tags:
      - Projects
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/storage-buckets/:
    get:
      operationId: reggie_api_v1_storage_buckets_list
      description: API endpoint that allows managing storage buckets.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Storage Buckets
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStorageBucketList'
          description: ''
    post:
      operationId: reggie_api_v1_storage_buckets_create
      description: API endpoint that allows managing storage buckets.
      tags:
      - Storage Buckets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageBucket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StorageBucket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StorageBucket'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBucket'
          description: ''
  /reggie/api/v1/storage-buckets/{id}/:
    get:
      operationId: reggie_api_v1_storage_buckets_retrieve
      description: API endpoint that allows managing storage buckets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this storage bucket.
        required: true
      tags:
      - Storage Buckets
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBucket'
          description: ''
    put:
      operationId: reggie_api_v1_storage_buckets_update
      description: API endpoint that allows managing storage buckets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this storage bucket.
        required: true
      tags:
      - Storage Buckets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorageBucket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/StorageBucket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StorageBucket'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBucket'
          description: ''
    patch:
      operationId: reggie_api_v1_storage_buckets_partial_update
      description: API endpoint that allows managing storage buckets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this storage bucket.
        required: true
      tags:
      - Storage Buckets
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStorageBucket'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedStorageBucket'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStorageBucket'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorageBucket'
          description: ''
    delete:
      operationId: reggie_api_v1_storage_buckets_destroy
      description: API endpoint that allows managing storage buckets.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this storage bucket.
        required: true
      tags:
      - Storage Buckets
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /reggie/api/v1/tags/:
    get:
      operationId: reggie_api_v1_tags_list
      description: API endpoint that allows managing tags.
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTagList'
          description: ''
    post:
      operationId: reggie_api_v1_tags_create
      description: API endpoint that allows managing tags.
      tags:
      - Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /reggie/api/v1/tags/{id}/:
    get:
      operationId: reggie_api_v1_tags_retrieve
      description: API endpoint that allows managing tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: reggie_api_v1_tags_update
      description: API endpoint that allows managing tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: reggie_api_v1_tags_partial_update
      description: API endpoint that allows managing tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - Tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: reggie_api_v1_tags_destroy
      description: API endpoint that allows managing tags.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this tag.
        required: true
      tags:
      - Tags
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
  /teams/api/teams/:
    get:
      operationId: teams_list
      parameters:
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeamList'
          description: ''
    post:
      operationId: teams_create
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
  /teams/api/teams/{id}/:
    get:
      operationId: teams_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    put:
      operationId: teams_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Team'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Team'
        required: true
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    patch:
      operationId: teams_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeam'
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: ''
    delete:
      operationId: teams_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this team.
        required: true
      tags:
      - teams
      security:
      - cookieAuth: []
      - basicAuth: []
      - jwtAuth: []
      - ApiKeyAuth: []
      responses:
        '204':
          description: No response body
components:
  schemas:
    Agent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        agent_id:
          type: string
          readOnly: true
          description: Unique identifier for the agent, used for session storage.
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        category:
          type: integer
          nullable: true
        model:
          type: integer
          nullable: true
          description: AI model used by the agent.
        instructions:
          allOf:
          - $ref: '#/components/schemas/AgentInstruction'
          readOnly: true
        instructions_id:
          type: integer
          writeOnly: true
        custom_instruction:
          type: string
          writeOnly: true
        expected_output:
          allOf:
          - $ref: '#/components/schemas/AgentExpectedOutput'
          readOnly: true
        expected_output_id:
          type: integer
          writeOnly: true
        expected_output_data:
          allOf:
          - $ref: '#/components/schemas/AgentExpectedOutput'
          writeOnly: true
        knowledge_base:
          type: integer
          nullable: true
        search_knowledge:
          type: boolean
        cite_knowledge:
          type: boolean
        add_datetime_to_instructions:
          type: boolean
        show_tool_calls:
          type: boolean
        markdown_enabled:
          type: boolean
        debug_mode:
          type: boolean
          description: Enable debug mode for logging.
        num_history_responses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: Number of past responses to keep in chat memory.
        is_global:
          type: boolean
        team:
          type: integer
          nullable: true
        subscriptions:
          type: array
          items:
            type: integer
            title: ID
        created_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - agent_id
      - created_at
      - expected_output
      - id
      - instructions
      - name
    AgentExpectedOutput:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          description: Optional title for this expected output, e.g., 'Basic Research
            Report'.
          maxLength: 255
        expected_output:
          type: string
        category:
          $ref: '#/components/schemas/CategoryEnum'
        is_enabled:
          type: boolean
        is_global:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        agent:
          type: integer
          nullable: true
      required:
      - created_at
      - expected_output
      - id
      - updated_at
      - user
    AgentInstruction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          description: Optional title for the instruction, e.g., 'Default Retrieval
            Strategy'.
          maxLength: 255
        instruction:
          type: string
        category:
          $ref: '#/components/schemas/CategoryEnum'
        is_template:
          type: boolean
        is_enabled:
          type: boolean
        is_global:
          type: boolean
        is_system:
          type: boolean
          description: Flag for platform/system-level instructions.
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
      required:
      - created_at
      - id
      - instruction
      - updated_at
      - user
    BulkDocumentUpload:
      type: object
      properties:
        files:
          type: array
          items:
            type: string
        title:
          type: string
          maxLength: 255
        description:
          type: string
        team:
          type: integer
      required:
      - files
    CategoryEnum:
      enum:
      - Scope & Knowledge Boundaries
      - Information Retrieval & Accuracy
      - Response Handling & Formatting
      - Compliance-Specific Instructions
      - Personality
      - Process
      - Improvement
      - Template
      - User
      - System
      type: string
      description: |-
        * `Scope & Knowledge Boundaries` - Scope & Knowledge Boundaries
        * `Information Retrieval & Accuracy` - Information Retrieval & Accuracy
        * `Response Handling & Formatting` - Response Handling & Formatting
        * `Compliance-Specific Instructions` - Compliance-Specific Instructions
        * `Personality` - Personality
        * `Process` - Process
        * `Improvement` - Improvement
        * `Template` - Template
        * `User` - User-Defined Primary Instruction
        * `System` - System-Level Instruction
    ChatSession:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          minLength: 3
        agent_id:
          type: string
          writeOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
      required:
      - agent_id
      - created_at
      - session_id
      - updated_at
    CustomUser:
      type: object
      description: |-
        Basic serializer to pass CustomUser details to the front end.
        Extend with any fields your app needs.
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        avatar_url:
          type: string
          readOnly: true
        get_display_name:
          type: string
          readOnly: true
      required:
      - avatar_url
      - get_display_name
      - id
    Document:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        file:
          type: string
          format: uri
          description: 'Upload a file to the user''s document library. Supported types:
            pdf, docx, txt, csv, json'
        file_type:
          allOf:
          - $ref: '#/components/schemas/FileTypeEnum'
          description: |-
            Type of the file. Supported types: pdf, docx, txt, csv, json

            * `pdf` - PDF
            * `docx` - DOCX
            * `txt` - TXT
            * `csv` - CSV
            * `json` - JSON
            * `other` - Other
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        is_global:
          type: boolean
          description: Global public library document.
        source:
          type: string
          nullable: true
          maxLength: 255
        uploaded_by:
          type: integer
          nullable: true
        team:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
        starred_by:
          type: array
          items:
            type: integer
      required:
      - created_at
      - file
      - id
      - title
      - updated_at
    DocumentTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
      required:
      - created_at
      - id
      - name
      - updated_at
    FileTypeEnum:
      enum:
      - pdf
      - docx
      - txt
      - csv
      - json
      - other
      type: string
      description: |-
        * `pdf` - PDF
        * `docx` - DOCX
        * `txt` - TXT
        * `csv` - CSV
        * `json` - JSON
        * `other` - Other
    Invitation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        team:
          type: integer
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        invited_by:
          type: string
          readOnly: true
        is_accepted:
          type: boolean
      required:
      - email
      - id
      - invited_by
      - team
    JWT:
      type: object
      description: Serializer for JWT authentication.
      properties:
        access:
          type: string
        refresh:
          type: string
        user:
          $ref: '#/components/schemas/CustomUser'
      required:
      - access
      - refresh
      - user
    KnowledgeBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        knowledge_type:
          allOf:
          - $ref: '#/components/schemas/KnowledgeTypeEnum'
          description: |-
            Defines how this knowledge base is structured (e.g., PDFs, SQL, API, etc.).

            * `arxiv` - ArXiv Papers
            * `combined` - Combined Knowledge Base
            * `csv` - CSV Files
            * `document` - Document Files (DOCX)
            * `json` - JSON Files
            * `langchain` - LangChain Retriever
            * `pdf` - Local PDF Files
            * `pdf_url` - PDF Files from URLs
            * `s3_pdf` - PDF Files from S3
            * `s3_text` - Text Files from S3
            * `text` - Local Text Files
            * `website` - Website Data
            * `wikipedia` - Wikipedia Articles
            * `other` - Other Knowledge Type
        path:
          type: string
          nullable: true
          description: Path for files or storage location (e.g., local dir, URL, S3
            bucket).
          maxLength: 500
        vector_table_name:
          type: string
          description: Vector database table name for embeddings.
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the knowledge base was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the knowledge base was last updated.
      required:
      - created_at
      - id
      - name
      - updated_at
      - vector_table_name
    KnowledgeTypeEnum:
      enum:
      - arxiv
      - combined
      - csv
      - document
      - json
      - langchain
      - pdf
      - pdf_url
      - s3_pdf
      - s3_text
      - text
      - website
      - wikipedia
      - other
      type: string
      description: |-
        * `arxiv` - ArXiv Papers
        * `combined` - Combined Knowledge Base
        * `csv` - CSV Files
        * `document` - Document Files (DOCX)
        * `json` - JSON Files
        * `langchain` - LangChain Retriever
        * `pdf` - Local PDF Files
        * `pdf_url` - PDF Files from URLs
        * `s3_pdf` - PDF Files from S3
        * `s3_text` - Text Files from S3
        * `text` - Local Text Files
        * `website` - Website Data
        * `wikipedia` - Wikipedia Articles
        * `other` - Other Knowledge Type
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    LoginResponse:
      type: object
      properties:
        status:
          type: string
        detail:
          type: string
        jwt:
          $ref: '#/components/schemas/JWT'
        temp_otp_token:
          type: string
      required:
      - detail
      - status
    Membership:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user_id:
          type: integer
          readOnly: true
        first_name:
          type: string
          readOnly: true
        last_name:
          type: string
          readOnly: true
        display_name:
          type: string
          readOnly: true
        role:
          $ref: '#/components/schemas/RoleEnum'
      required:
      - display_name
      - first_name
      - id
      - last_name
      - role
      - user_id
    ModelProvider:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        provider:
          allOf:
          - $ref: '#/components/schemas/ModelProviderProviderEnum'
          description: |-
            LLM provider (e.g., OpenAI, Google, Anthropic, Groq).

            * `openai` - OpenAI
            * `google` - Google
            * `anthropic` - Anthropic
            * `groq` - Groq
        model_name:
          type: string
          description: Model identifier (e.g., gpt-4o, gemini-pro, claude-3).
          maxLength: 50
        is_enabled:
          type: boolean
          description: Whether this model is available for use.
      required:
      - id
      - model_name
      - provider
    ModelProviderProviderEnum:
      enum:
      - openai
      - google
      - anthropic
      - groq
      type: string
      description: |-
        * `openai` - OpenAI
        * `google` - Google
        * `anthropic` - Anthropic
        * `groq` - Groq
    OtpRequest:
      type: object
      properties:
        temp_otp_token:
          type: string
        otp:
          type: string
      required:
      - otp
      - temp_otp_token
    PaginatedAgentExpectedOutputList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AgentExpectedOutput'
    PaginatedAgentInstructionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/AgentInstruction'
    PaginatedAgentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Agent'
    PaginatedChatSessionList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ChatSession'
    PaginatedDocumentList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Document'
    PaginatedDocumentTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/DocumentTag'
    PaginatedInvitationList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
    PaginatedKnowledgeBaseList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/KnowledgeBase'
    PaginatedModelProviderList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/ModelProvider'
    PaginatedProjectList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Project'
    PaginatedStorageBucketList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/StorageBucket'
    PaginatedTagList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
    PaginatedTeamList:
      type: object
      required:
      - count
      - results
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Team'
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PatchedAgent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        agent_id:
          type: string
          readOnly: true
          description: Unique identifier for the agent, used for session storage.
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        category:
          type: integer
          nullable: true
        model:
          type: integer
          nullable: true
          description: AI model used by the agent.
        instructions:
          allOf:
          - $ref: '#/components/schemas/AgentInstruction'
          readOnly: true
        instructions_id:
          type: integer
          writeOnly: true
        custom_instruction:
          type: string
          writeOnly: true
        expected_output:
          allOf:
          - $ref: '#/components/schemas/AgentExpectedOutput'
          readOnly: true
        expected_output_id:
          type: integer
          writeOnly: true
        expected_output_data:
          allOf:
          - $ref: '#/components/schemas/AgentExpectedOutput'
          writeOnly: true
        knowledge_base:
          type: integer
          nullable: true
        search_knowledge:
          type: boolean
        cite_knowledge:
          type: boolean
        add_datetime_to_instructions:
          type: boolean
        show_tool_calls:
          type: boolean
        markdown_enabled:
          type: boolean
        debug_mode:
          type: boolean
          description: Enable debug mode for logging.
        num_history_responses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          description: Number of past responses to keep in chat memory.
        is_global:
          type: boolean
        team:
          type: integer
          nullable: true
        subscriptions:
          type: array
          items:
            type: integer
            title: ID
        created_at:
          type: string
          format: date-time
          readOnly: true
    PatchedAgentExpectedOutput:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          description: Optional title for this expected output, e.g., 'Basic Research
            Report'.
          maxLength: 255
        expected_output:
          type: string
        category:
          $ref: '#/components/schemas/CategoryEnum'
        is_enabled:
          type: boolean
        is_global:
          type: boolean
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
        agent:
          type: integer
          nullable: true
    PatchedAgentInstruction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          description: Optional title for the instruction, e.g., 'Default Retrieval
            Strategy'.
          maxLength: 255
        instruction:
          type: string
        category:
          $ref: '#/components/schemas/CategoryEnum'
        is_template:
          type: boolean
        is_enabled:
          type: boolean
        is_global:
          type: boolean
        is_system:
          type: boolean
          description: Flag for platform/system-level instructions.
        created_at:
          type: string
          format: date-time
          readOnly: true
        user:
          type: integer
    PatchedChatSession:
      type: object
      properties:
        session_id:
          type: string
          format: uuid
          readOnly: true
        title:
          type: string
          minLength: 3
        agent_id:
          type: string
          writeOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
    PatchedCustomUser:
      type: object
      description: |-
        Basic serializer to pass CustomUser details to the front end.
        Extend with any fields your app needs.
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        avatar_url:
          type: string
          readOnly: true
        get_display_name:
          type: string
          readOnly: true
    PatchedDocument:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        file:
          type: string
          format: uri
          description: 'Upload a file to the user''s document library. Supported types:
            pdf, docx, txt, csv, json'
        file_type:
          allOf:
          - $ref: '#/components/schemas/FileTypeEnum'
          description: |-
            Type of the file. Supported types: pdf, docx, txt, csv, json

            * `pdf` - PDF
            * `docx` - DOCX
            * `txt` - TXT
            * `csv` - CSV
            * `json` - JSON
            * `other` - Other
        visibility:
          $ref: '#/components/schemas/VisibilityEnum'
        is_global:
          type: boolean
          description: Global public library document.
        source:
          type: string
          nullable: true
          maxLength: 255
        uploaded_by:
          type: integer
          nullable: true
        team:
          type: integer
          nullable: true
        tags:
          type: array
          items:
            type: integer
        starred_by:
          type: array
          items:
            type: integer
    PatchedDocumentTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 100
    PatchedInvitation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        team:
          type: integer
        email:
          type: string
          format: email
          maxLength: 254
        role:
          $ref: '#/components/schemas/RoleEnum'
        invited_by:
          type: string
          readOnly: true
        is_accepted:
          type: boolean
    PatchedKnowledgeBase:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 255
        knowledge_type:
          allOf:
          - $ref: '#/components/schemas/KnowledgeTypeEnum'
          description: |-
            Defines how this knowledge base is structured (e.g., PDFs, SQL, API, etc.).

            * `arxiv` - ArXiv Papers
            * `combined` - Combined Knowledge Base
            * `csv` - CSV Files
            * `document` - Document Files (DOCX)
            * `json` - JSON Files
            * `langchain` - LangChain Retriever
            * `pdf` - Local PDF Files
            * `pdf_url` - PDF Files from URLs
            * `s3_pdf` - PDF Files from S3
            * `s3_text` - Text Files from S3
            * `text` - Local Text Files
            * `website` - Website Data
            * `wikipedia` - Wikipedia Articles
            * `other` - Other Knowledge Type
        path:
          type: string
          nullable: true
          description: Path for files or storage location (e.g., local dir, URL, S3
            bucket).
          maxLength: 500
        vector_table_name:
          type: string
          description: Vector database table name for embeddings.
          maxLength: 255
        created_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the knowledge base was created.
        updated_at:
          type: string
          format: date-time
          readOnly: true
          description: Timestamp when the knowledge base was last updated.
    PatchedProject:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        owner:
          type: integer
        team:
          type: integer
          nullable: true
          description: Team this project belongs to (optional if personal).
        tags:
          type: array
          items:
            type: integer
        starred_by:
          type: array
          items:
            type: integer
    PatchedStorageBucket:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          description: Name of the storage bucket (e.g., 'Main Tax Docs')
          maxLength: 255
        provider:
          allOf:
          - $ref: '#/components/schemas/StorageBucketProviderEnum'
          description: |-
            Storage provider (Local, AWS S3, or Google Cloud Storage).

            * `local` - Local Storage
            * `aws_s3` - Amazon S3
            * `gcs` - Google Cloud Storage
        bucket_url:
          type: string
          description: Full storage bucket URL (e.g., 's3://my-bucket/', 'gcs://my-bucket/',
            or local path)
          maxLength: 500
    PatchedTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 50
    PatchedTeam:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        members:
          type: array
          items:
            $ref: '#/components/schemas/Membership'
          readOnly: true
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
          readOnly: true
        dashboard_url:
          type: string
          readOnly: true
        is_admin:
          type: boolean
          readOnly: true
        subscription:
          allOf:
          - $ref: '#/components/schemas/Subscription'
          readOnly: true
        has_active_subscription:
          type: boolean
          readOnly: true
    Price:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
        product_name:
          type: string
        human_readable_price:
          type: string
          readOnly: true
        payment_amount:
          type: string
          readOnly: true
        nickname:
          type: string
          description: A brief description of the plan, hidden from customers.
          maxLength: 250
        unit_amount:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
          nullable: true
          description: The unit amount in cents to be charged, represented as a whole
            integer if possible. Null if a sub-cent precision is required.
      required:
      - human_readable_price
      - id
      - payment_amount
      - product_name
    Project:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        owner:
          type: integer
        team:
          type: integer
          nullable: true
          description: Team this project belongs to (optional if personal).
        tags:
          type: array
          items:
            type: integer
        starred_by:
          type: array
          items:
            type: integer
      required:
      - created_at
      - id
      - name
      - owner
      - updated_at
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password1
      - password2
      - username
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    RoleEnum:
      enum:
      - admin
      - member
      type: string
      description: |-
        * `admin` - Administrator
        * `member` - Member
    StatusEnum:
      enum:
      - active
      - canceled
      - incomplete
      - incomplete_expired
      - past_due
      - trialing
      - unpaid
      type: string
      description: |-
        * `active` - Active
        * `canceled` - Canceled
        * `incomplete` - Incomplete
        * `incomplete_expired` - Incomplete Expired
        * `past_due` - Past due
        * `trialing` - Trialing
        * `unpaid` - Unpaid
    StorageBucket:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          description: Name of the storage bucket (e.g., 'Main Tax Docs')
          maxLength: 255
        provider:
          allOf:
          - $ref: '#/components/schemas/StorageBucketProviderEnum'
          description: |-
            Storage provider (Local, AWS S3, or Google Cloud Storage).

            * `local` - Local Storage
            * `aws_s3` - Amazon S3
            * `gcs` - Google Cloud Storage
        bucket_url:
          type: string
          description: Full storage bucket URL (e.g., 's3://my-bucket/', 'gcs://my-bucket/',
            or local path)
          maxLength: 500
      required:
      - bucket_url
      - created_at
      - id
      - name
      - updated_at
    StorageBucketProviderEnum:
      enum:
      - local
      - aws_s3
      - gcs
      type: string
      description: |-
        * `local` - Local Storage
        * `aws_s3` - Amazon S3
        * `gcs` - Google Cloud Storage
    StreamAgentRequest:
      type: object
      properties:
        agent_id:
          type: string
          description: ID of the agent to use
        message:
          type: string
          description: Message to send to the agent
        session_id:
          type: string
          description: Unique session identifier for chat history
      required:
      - agent_id
      - message
      - session_id
    Subscription:
      type: object
      description: A serializer for Subscriptions which uses the SubscriptionWrapper
        object under the hood
      properties:
        id:
          type: string
          maxLength: 255
        display_name:
          type: string
        start_date:
          type: string
          format: date-time
          nullable: true
          description: Date when the subscription was first created. The date might
            differ from the created date due to backdating.
        billing_interval:
          type: string
        current_period_start:
          type: string
          format: date-time
          description: Start of the current period for which the subscription has
            been invoiced.
        current_period_end:
          type: string
          format: date-time
          description: End of the current period for which the subscription has been
            invoiced. At the end of this period, a new invoice will be created.
        cancel_at_period_end:
          type: boolean
          description: If the subscription has been canceled with the ``at_period_end``
            flag set to true, ``cancel_at_period_end`` on the subscription will be
            true. You can use this attribute to determine whether a subscription that
            has a status of active is scheduled to be canceled at the end of the current
            period.
        status:
          allOf:
          - $ref: '#/components/schemas/StatusEnum'
          description: |-
            The status of this subscription.

            * `active` - Active
            * `canceled` - Canceled
            * `incomplete` - Incomplete
            * `incomplete_expired` - Incomplete Expired
            * `past_due` - Past due
            * `trialing` - Trialing
            * `unpaid` - Unpaid
        quantity:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
          description: The quantity applied to this subscription. This value will
            be `null` for multi-plan subscriptions
        items:
          type: array
          items:
            $ref: '#/components/schemas/SubscriptionItem'
      required:
      - billing_interval
      - current_period_end
      - current_period_start
      - display_name
      - id
      - items
      - status
    SubscriptionItem:
      type: object
      properties:
        id:
          type: string
          maxLength: 255
        price:
          $ref: '#/components/schemas/Price'
        quantity:
          type: integer
          maximum: 2147483647
          minimum: 0
          nullable: true
          description: The quantity of the plan to which the customer should be subscribed.
      required:
      - id
      - price
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 50
      required:
      - created_at
      - id
      - name
      - updated_at
    Team:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        slug:
          type: string
          pattern: ^[-a-zA-Z0-9_]+$
        members:
          type: array
          items:
            $ref: '#/components/schemas/Membership'
          readOnly: true
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/Invitation'
          readOnly: true
        dashboard_url:
          type: string
          readOnly: true
        is_admin:
          type: boolean
          readOnly: true
        subscription:
          allOf:
          - $ref: '#/components/schemas/Subscription'
          readOnly: true
        has_active_subscription:
          type: boolean
          readOnly: true
      required:
      - dashboard_url
      - has_active_subscription
      - id
      - invitations
      - is_admin
      - members
      - name
      - subscription
    TokenRefresh:
      type: object
      properties:
        access:
          type: string
          readOnly: true
        refresh:
          type: string
          writeOnly: true
      required:
      - access
      - refresh
    TokenVerify:
      type: object
      properties:
        token:
          type: string
          writeOnly: true
      required:
      - token
    UserSignupStats:
      type: object
      properties:
        date:
          type: string
          format: date
        count:
          type: integer
      required:
      - count
      - date
    VisibilityEnum:
      enum:
      - public
      - private
      type: string
      description: |-
        * `public` - Public
        * `private` - Private
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: Authorization
    basicAuth:
      type: http
      scheme: basic
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
