import {FormEvent, useContext, useState} from "react";
// Assuming AllauthMfaTotpRequest and User types from allauth response
import {ApiApi, AllauthMfaTotpRequest, User} from "api-client";
import {getApiConfiguration} from "../api/utils";
import {AuthContext} from "../auth/authcontext";
import { useNavigate } from "react-router-dom";

const getClient = () => {
  return new ApiApi(getApiConfiguration());
};

export default function OtpPage() {
  const { setUserDetails } = useContext(AuthContext); // Renamed to handleLoginSuccess in AuthProvider
  const [ otp, setOtp ] =  useState('');
  const [error, setError] = useState("");
  const navigate = useNavigate();
  // tempOtpToken from localStorage is no longer needed. Allauth manages MFA state via session.

  async function onSubmit(e: FormEvent<HTMLFormElement>) {
    e.preventDefault();
    setError(""); // Clear previous error
    const client = getClient();

    // Construct payload for allauth headless MFA TOTP verification
    // This depends on the exact API spec from allauth.
    const otpPayload: AllauthMfaTotpRequest = { code: otp }; // Placeholder type and payload

    try {
      // Placeholder for the actual generated method, e.g., client.apiAllauthMFATOTPAuthenticateCreate(otpPayload)
      // The response on successful OTP verification should be the user object or a success indicator,
      // and the session is now fully authenticated.
      const response = await client.apiAllauthMFATOTPAuthenticateCreate({allauthMfaTotpRequest: otpPayload}); // Placeholder

      // Assuming response contains user data upon successful OTP verification
      // or implies success and AuthProvider.fetchUser() will get the user.
      if (response.user) { // Hypothetical success response with user data
        setUserDetails(response.user as User);
        navigate('/');
      } else if (response.message && response.message.includes("success")) { // Another hypothetical success indicator
        setUserDetails(); // Will trigger fetchUser in AuthProvider
        navigate('/');
      } else if (response.status === "ok" || response.status === 200) { // More generic success
        setUserDetails();
        navigate('/');
      }
      else {
        // Handle cases where login might not be complete or an unexpected response
        setError(response.detail || "OTP verification failed. Please try again.");
      }

    } catch (error: any) {
      console.error("OTP verification error:", error);
      if (error.response && error.response.data) {
        const errorData = error.response.data;
        if (errorData.detail) {
          setError(errorData.detail);
        } else if (errorData.non_field_errors && errorData.non_field_errors.length > 0) {
          setError(errorData.non_field_errors.join(" "));
        } else if (errorData.code && Array.isArray(errorData.code) && errorData.code.length > 0) {
          // Allauth often returns errors for the 'code' field (the OTP itself)
          setError(errorData.code[0]);
        } else {
          setError("An unknown error occurred during OTP verification.");
        }
      } else {
        setError("There was a problem verifying your OTP. Please try again.");
      }
    }
  }

  return (
    <div className="flex justify-center min-h-screen my-8 ">
      <div className="w-96 px-4 py-4">
        <div>
          <h2 className="mt-6 text-center text-2xl font-bold text-gray-900 dark:text-gray-100">
            Sign In
          </h2>
          <form className="max-w-sm mx-auto" onSubmit={onSubmit}>
            <div className="form-control w-full">
              <label className="label font-bold" htmlFor="email">
                Enter the one-time-code generated by your authenticator application
              </label>
              <input type="text"
                     inputMode="numeric"
                     pattern="[0-9]*"
                     name="otp"
                     id="otp"
                     className="input input-bordered w-full"
                     placeholder="012345" required
                     onChange={(e) => setOtp(e.target.value)}
                     value={otp}
                     />
              {error ? (
                <p className={"text-xs text-red-500 mt-2"}>{error} </p>
              ) : ""}
            </div>
            <div className="mt-2">
              <button type="submit"
                      className="btn btn-primary btn-block">
                Sign In
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  );
}
